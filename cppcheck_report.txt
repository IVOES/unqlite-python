src/unqlite.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 57 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/unqlite.c:6388:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(iSize); /* cc warning */
  ^
src/unqlite.c:10755:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(pKey); /* cc warning */
  ^
src/unqlite.c:12696:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:14341:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pKey); /* cc warning */
 ^
src/unqlite.c:15376:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(nArg); /* cc warning */
 ^
src/unqlite.c:15377:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(apArg);
 ^
src/unqlite.c:17393:4: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
   SXUNUSED(iCompileFlag); /* cc warning */
   ^
src/unqlite.c:17442:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(iCompileFlag); /* cc warning */
  ^
src/unqlite.c:17915:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(iCompileFlag); /* cc warning */
 ^
src/unqlite.c:18203:5: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
    SXUNUSED(iCompileFlag); /* cc warning */
    ^
src/unqlite.c:20741:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUnused);
 ^
src/unqlite.c:20768:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUnused);
 ^
src/unqlite.c:20776:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUnused);
 ^
src/unqlite.c:20790:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUnused);
 ^
src/unqlite.c:20799:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUnused);
 ^
src/unqlite.c:20808:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUnused);
 ^
src/unqlite.c:20821:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUnused);
 ^
src/unqlite.c:20849:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUnused); /* cc warning */
 ^
src/unqlite.c:20871:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUnused); /* cc warning */
 ^
src/unqlite.c:20924:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:20933:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:20942:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:20951:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:20960:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:20969:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:20978:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:20987:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:20996:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21005:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21014:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21023:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21032:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21041:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21050:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21059:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21068:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21077:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21086:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21095:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21258:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21267:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21276:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21285:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21294:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21303:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21312:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21321:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21330:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21339:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21348:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21357:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21366:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21375:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21384:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21393:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21402:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21411:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21420:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21429:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21439:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21449:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21458:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21467:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21476:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21485:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21494:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21503:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21512:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21521:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21530:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21539:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21548:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21557:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21566:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21575:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21584:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21593:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21602:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21611:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21620:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21629:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21638:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21647:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21656:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21665:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21674:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21683:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21692:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21701:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21710:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21719:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21728:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21737:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21746:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21755:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21764:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21773:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21782:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21791:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21800:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21809:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21818:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21827:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21836:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21845:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21854:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21863:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21905:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21914:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21923:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21932:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21941:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21950:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21959:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21968:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21977:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:25279:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(pKey); /* cc warning */
  ^
src/unqlite.c:25809:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pCtx); /* cc warning */
 ^
src/unqlite.c:25820:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pKey); /* cc warning */
 ^
src/unqlite.c:25821:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:28873:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pLex); /* Prevent compiler warning */
 ^
src/unqlite.c:30287:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUnused);
 ^
src/unqlite.c:31951:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(iNest);
 ^
src/unqlite.c:33463:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
src/unqlite.c:33464:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
src/unqlite.c:35453:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
src/unqlite.c:35454:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
src/unqlite.c:35480:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
src/unqlite.c:35481:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
src/unqlite.c:35510:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
src/unqlite.c:35511:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
src/unqlite.c:35541:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
src/unqlite.c:35542:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
src/unqlite.c:35572:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
src/unqlite.c:35573:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
src/unqlite.c:37658:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(pKey); /* cc warning */
  ^
src/unqlite.c:37771:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(pCtx); /* cc warning */
  ^
src/unqlite.c:40205:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 recursive = 0; /* cc warning */
 ^
src/unqlite.c:40743:4: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
   SXUNUSED(pResource); /* cc warning */
   ^
src/unqlite.c:40792:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  pResource = 0; /* Compiler warning */
  ^
src/unqlite.c:43202:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  iErr = JX9_CTX_ERR;
  ^
src/unqlite.c:43251:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  iErr = JX9_CTX_ERR;
  ^
src/unqlite.c:45837:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
src/unqlite.c:46064:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
src/unqlite.c:46065:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
src/unqlite.c:46234:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
src/unqlite.c:46235:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
src/unqlite.c:46331:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(nArg); /* cc warning */
 ^
src/unqlite.c:46332:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(apArg);
 ^
src/unqlite.c:46548:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(nArg);
 ^
src/unqlite.c:46549:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(apArg); /* cc warning */
 ^
src/unqlite.c:47542:4: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
   SXUNUSED(pKey);
   ^
src/unqlite.c:49205:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 zRaw += 8;
 ^
src/unqlite.c:51705:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(iPos);
  ^
src/unqlite.c:52251:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(iPageSize); /* cc warning */
  ^
src/unqlite.c:53716:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(fullSync);
  ^
src/unqlite.c:53717:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(dataOnly);
  ^
src/unqlite.c:53859:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(NotUsed);
  ^
src/unqlite.c:53904:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(isDelete);
  ^
src/unqlite.c:53905:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(noLock);
  ^
src/unqlite.c:53906:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(pVfs);
  ^
src/unqlite.c:54051:6: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
     SXUNUSED(zPath);
     ^
src/unqlite.c:54201:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(NotUsed);
  ^
src/unqlite.c:54239:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(NotUsed);
  ^
src/unqlite.c:54251:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pVfs);
 ^
src/unqlite.c:54276:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(NotUsed);
  ^
src/unqlite.c:54317:4: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
   SXUNUSED(pVfs);
   ^
src/unqlite.c:59040:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(pKey); /* cc warning */
  ^
src/unqlite.c:59053:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(iFlag); /* cc warning */
  ^
src/unqlite.c:59114:9: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
        SXUNUSED(iFlag); /* cc warning */
        ^
src/unqlite.c:59208:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(argc); /* cc warning */
 ^
src/unqlite.c:59209:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(argv);
 ^
src/unqlite.c:59226:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(argc); /* cc warning */
 ^
src/unqlite.c:59227:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(argv);
 ^
src/unqlite.c:59247:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(argc); /* cc warning */
 ^
src/unqlite.c:59248:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(argv);
 ^
src/unqlite.c:59262:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(argc); /* cc warning */
 ^
src/unqlite.c:59263:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(argv);
 ^
src/unqlite.c:60101:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(argc); /* cc warning */
 ^
src/unqlite.c:60102:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(argv);
 ^
src/unqlite.c:60126:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(argc); /* cc warning */
 ^
src/unqlite.c:60127:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(argv);
 ^
src/unqlite.c:60151:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(argc); /* cc warning */
 ^
src/unqlite.c:60152:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(argv);
 ^
src/unqlite.c:56652:32: style:inconclusive: Boolean expression 'pPager->iPageSize<-1' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
     || ((pPager->iPageSize<-1)&pPager->iPageSize)!=0    || ((pPager->iSectorSize-1)&pPager->iSectorSize)!=0
                               ^
src/unqlite.c:10541:24: warning: Either the condition 'n<(sizeof(azHtmlEscape)/sizeof(azHtmlEscape[0]))' is redundant or the array 'azHtmlEscape[40]' is accessed at index 40, which is out of bounds. [arrayIndexOutOfBoundsCond]
   int c = azHtmlEscape[n+1][0];
                       ^
src/unqlite.c:10540:9: note: Assuming that condition 'n<(sizeof(azHtmlEscape)/sizeof(azHtmlEscape[0]))' is not redundant
  if( n < SX_ARRAYSIZE(azHtmlEscape) ){
        ^
src/unqlite.c:10541:24: note: Array index out of bounds
   int c = azHtmlEscape[n+1][0];
                       ^
src/unqlite.c:27066:14: warning: The address of local variable 'sRep' might be accessed at non-zero index. [objectIndex]
 zEnd = &zSrc[nSize];
             ^
src/unqlite.c:14391:9: note: Address of variable taken here.
 SyZero(&sRep, sizeof(str_replace_data));
        ^
src/unqlite.c:14391:9: note: Calling function 'SyZero', 1st argument '&sRep' value is lifetime=sRep
 SyZero(&sRep, sizeof(str_replace_data));
        ^
src/unqlite.c:27066:14: note: The address of local variable 'sRep' might be accessed at non-zero index.
 zEnd = &zSrc[nSize];
             ^
src/unqlite.c:27066:14: warning: The address of local variable 'sArg' might be accessed at non-zero index. [objectIndex]
 zEnd = &zSrc[nSize];
             ^
src/unqlite.c:19890:10: note: Address of variable taken here.
  SyZero(&sArg, sizeof(jx9_vm_func_arg));
         ^
src/unqlite.c:19890:10: note: Calling function 'SyZero', 1st argument '&sArg' value is lifetime=sArg
  SyZero(&sArg, sizeof(jx9_vm_func_arg));
         ^
src/unqlite.c:27066:14: note: The address of local variable 'sArg' might be accessed at non-zero index.
 zEnd = &zSrc[nSize];
             ^
src/unqlite.c:27066:14: warning: The address of local variable 'sKey' might be accessed at non-zero index. [objectIndex]
 zEnd = &zSrc[nSize];
             ^
src/unqlite.c:6679:29: note: Address of variable taken here.
    jx9MemObjInit(pMap->pVm,&sKey);
                            ^
src/unqlite.c:6679:29: note: Calling function 'jx9MemObjInit', 2nd argument '&sKey' value is lifetime=sKey
    jx9MemObjInit(pMap->pVm,&sKey);
                            ^
src/unqlite.c:31604:9: note: Calling function 'SyZero', 1st argument 'pObj' value is lifetime=sKey
 SyZero(pObj, sizeof(jx9_value));
        ^
src/unqlite.c:27066:14: note: The address of local variable 'sKey' might be accessed at non-zero index.
 zEnd = &zSrc[nSize];
             ^
src/unqlite.c:27066:14: warning: The address of local variable 'sKey' might be accessed at non-zero index. [objectIndex]
 zEnd = &zSrc[nSize];
             ^
src/unqlite.c:24307:35: note: Address of variable taken here.
  jx9MemObjInitFromInt(pMap->pVm, &sKey, pCur->xKey.iKey);
                                  ^
src/unqlite.c:24307:35: note: Calling function 'jx9MemObjInitFromInt', 2nd argument '&sKey' value is lifetime=sKey
  jx9MemObjInitFromInt(pMap->pVm, &sKey, pCur->xKey.iKey);
                                  ^
src/unqlite.c:31618:9: note: Calling function 'SyZero', 1st argument 'pObj' value is lifetime=sKey
 SyZero(pObj, sizeof(jx9_value));
        ^
src/unqlite.c:27066:14: note: The address of local variable 'sKey' might be accessed at non-zero index.
 zEnd = &zSrc[nSize];
             ^
src/unqlite.c:30371:29: warning: The address of local variable 'iNum' might be accessed at non-zero index. [objectIndex]
 unsigned char *zEnd = &zBuf[nLen];
                            ^
src/unqlite.c:46263:36: note: Address of variable taken here.
 SyRandomness(&pVm->sPrng, (void *)&iNum, sizeof(sxu32));
                                   ^
src/unqlite.c:46263:28: note: Calling function 'SyRandomness', 2nd argument '(void*)&iNum' value is lifetime=iNum
 SyRandomness(&pVm->sPrng, (void *)&iNum, sizeof(sxu32));
                           ^
src/unqlite.c:30371:29: note: The address of local variable 'iNum' might be accessed at non-zero index.
 unsigned char *zEnd = &zBuf[nLen];
                            ^
src/unqlite.c:30371:29: warning: The address of local variable 'iNum' might be accessed at non-zero index. [objectIndex]
 unsigned char *zEnd = &zBuf[nLen];
                            ^
src/unqlite.c:57926:38: note: Address of variable taken here.
 SyRandomness(&pPager->sPrng,(void *)&iNum,sizeof(iNum));
                                     ^
src/unqlite.c:57926:30: note: Calling function 'SyRandomness', 2nd argument '(void*)&iNum' value is lifetime=iNum
 SyRandomness(&pPager->sPrng,(void *)&iNum,sizeof(iNum));
                             ^
src/unqlite.c:30371:29: note: The address of local variable 'iNum' might be accessed at non-zero index.
 unsigned char *zEnd = &zBuf[nLen];
                            ^
src/unqlite.c:9566:8: style: Condition 'n==0' is always true [knownConditionTrueFalse]
  if( n==0 && r>=0 && r<LARGEST_INT64-1 ){
       ^
src/unqlite.c:9544:10: note: Assignment 'n=0', assigned value is 0
 int n = 0;
         ^
src/unqlite.c:9546:11: note: Assuming condition is false
 if( nArg < 1 ){
          ^
src/unqlite.c:9566:8: note: Condition 'n==0' is always true
  if( n==0 && r>=0 && r<LARGEST_INT64-1 ){
       ^
src/unqlite.c:12315:14: style: Condition 'width>0' is always false [knownConditionTrueFalse]
   if( width > 0 ){
             ^
src/unqlite.c:12308:11: note: Assignment 'width=0', assigned value is 0
  width = 0;
          ^
src/unqlite.c:12315:14: note: Condition 'width>0' is always false
   if( width > 0 ){
             ^
src/unqlite.c:12317:17: style: Condition 'n>0' is always true [knownConditionTrueFalse]
    if( vf && n > 0 ){
                ^
src/unqlite.c:12315:14: note: Assuming that condition 'width>0' is not redundant
   if( width > 0 ){
             ^
src/unqlite.c:12316:9: note: Assignment 'n=width', assigned value is 0
    n = width;
        ^
src/unqlite.c:12317:17: note: Condition 'n>0' is always true
    if( vf && n > 0 ){
                ^
src/unqlite.c:12445:13: style: Condition 'iVal<0' is always false [knownConditionTrueFalse]
   if( iVal < 0 ){
            ^
src/unqlite.c:12442:19: note: Assuming that condition 'iVal<0' is not redundant
          if( iVal<0 ){
                  ^
src/unqlite.c:12443:20: note: Assignment 'iVal=-iVal', assigned value is 0
            iVal = -iVal;
                   ^
src/unqlite.c:12445:13: note: Condition 'iVal<0' is always false
   if( iVal < 0 ){
            ^
src/unqlite.c:12457:14: style: Condition 'iVal<0' is always false [knownConditionTrueFalse]
    if( iVal < 0 ){
             ^
src/unqlite.c:12454:12: note: Assuming that condition 'iVal<0' is not redundant
   if( iVal<0 ){
           ^
src/unqlite.c:12455:12: note: Assignment 'iVal=-iVal', assigned value is 0
    iVal = -iVal;
           ^
src/unqlite.c:12457:14: note: Condition 'iVal<0' is always false
    if( iVal < 0 ){
             ^
src/unqlite.c:29212:24: style: Condition 'errorflag>0' is always true [knownConditionTrueFalse]
      return errorflag > 0 ? SXERR_FORMAT : SXRET_OK;
                       ^
src/unqlite.c:29207:19: note: Assignment 'errorflag=1', assigned value is 1
      errorflag = 1;
                  ^
src/unqlite.c:29209:11: note: Assuming condition is false
   if( rc != SXRET_OK ){
          ^
src/unqlite.c:29212:24: note: Condition 'errorflag>0' is always true
      return errorflag > 0 ? SXERR_FORMAT : SXRET_OK;
                       ^
src/unqlite.c:29332:18: style: Condition 'longvalue<0' is always false [knownConditionTrueFalse]
   if( longvalue < 0 ){
                 ^
src/unqlite.c:29329:24: note: Assuming that condition 'longvalue<0' is not redundant
          if( longvalue<0 ){
                       ^
src/unqlite.c:29330:25: note: Assignment 'longvalue=-longvalue', assigned value is 0
            longvalue = -longvalue;
                        ^
src/unqlite.c:29332:18: note: Condition 'longvalue<0' is always false
   if( longvalue < 0 ){
                 ^
src/unqlite.c:29344:19: style: Condition 'longvalue<0' is always false [knownConditionTrueFalse]
    if( longvalue < 0 ){
                  ^
src/unqlite.c:29341:17: note: Assuming that condition 'longvalue<0' is not redundant
   if( longvalue<0 ){
                ^
src/unqlite.c:29342:17: note: Assignment 'longvalue=-longvalue', assigned value is 0
    longvalue = -longvalue;
                ^
src/unqlite.c:29344:19: note: Condition 'longvalue<0' is always false
    if( longvalue < 0 ){
                  ^
src/unqlite.c:7547:16: warning: Either the condition 'pVm==0' is redundant or there is possible null pointer dereference: pVm. [nullPointerRedundantCheck]
  sxu32 nErr = pVm->sCodeGen.nErr;
               ^
src/unqlite.c:7546:36: note: Assuming that condition 'pVm==0' is not redundant
 if( pVm->sCodeGen.nErr > 0 || pVm == 0){
                                   ^
src/unqlite.c:7547:16: note: Null pointer dereference
  sxu32 nErr = pVm->sCodeGen.nErr;
               ^
src/unqlite.c:8303:60: warning: Possible null pointer dereference: pKey [nullPointer]
 rc = jx9HashmapInsert((jx9_hashmap *)pArray->x.pOther, &(*pKey), &(*pValue));
                                                           ^
src/unqlite.c:10968:32: note: Calling function 'jx9_array_add_elem', 2nd argument '0' value is 0
    jx9_array_add_elem(pArray, 0/* Automatic index assign*/, pValue);
                               ^
src/unqlite.c:8299:40: note: Assuming condition is Assuming condition is false
 if( (pArray->iFlags & MEMOBJ_HASHMAP) == 0 ){
                                       ^
src/unqlite.c:8303:60: note: Null pointer dereference
 rc = jx9HashmapInsert((jx9_hashmap *)pArray->x.pOther, &(*pKey), &(*pValue));
                                                           ^
src/unqlite.c:23340:34: warning: Possible null pointer dereference: pKey [nullPointer]
 rc = HashmapInsert(&(*pMap), &(*pKey), &(*pVal));
                                 ^
src/unqlite.c:6876:31: note: Calling function 'jx9HashmapInsert', 2nd argument '0' value is 0
   rc = jx9HashmapInsert(pMap,0,&sVal);
                              ^
src/unqlite.c:23340:34: note: Null pointer dereference
 rc = HashmapInsert(&(*pMap), &(*pKey), &(*pVal));
                                 ^
src/unqlite.c:23340:44: warning: Possible null pointer dereference: pVal [nullPointer]
 rc = HashmapInsert(&(*pMap), &(*pKey), &(*pVal));
                                           ^
src/unqlite.c:43792:38: note: Calling function 'jx9HashmapInsert', 3rd argument '0' value is 0
   rc = jx9HashmapInsert(pMap, pIdx, 0);
                                     ^
src/unqlite.c:23340:44: note: Null pointer dereference
 rc = HashmapInsert(&(*pMap), &(*pKey), &(*pVal));
                                           ^
src/unqlite.c:18136:6: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
  rc = GenStateCompileJSONEntry(&(*pGen), pCur, pGen->pIn, EXPR_FLAG_RDONLY_LOAD/*Do not create the variable if inexistant*/,0);
     ^
src/unqlite.c:18100:6: note: rc is assigned
  rc = SXERR_EMPTY;
     ^
src/unqlite.c:18136:6: note: rc is overwritten
  rc = GenStateCompileJSONEntry(&(*pGen), pCur, pGen->pIn, EXPR_FLAG_RDONLY_LOAD/*Do not create the variable if inexistant*/,0);
     ^
src/unqlite.c:28152:24: style: Variable 'pEntry->pNextCollide' is reassigned a value before the old one has been used. [redundantAssignment]
  pEntry->pNextCollide = apNew[iBucket];
                       ^
src/unqlite.c:28149:24: note: pEntry->pNextCollide is assigned
  pEntry->pNextCollide = pEntry->pPrevCollide = 0;
                       ^
src/unqlite.c:28152:24: note: pEntry->pNextCollide is overwritten
  pEntry->pNextCollide = apNew[iBucket];
                       ^
src/unqlite.c:29936:6: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
  rc = SyLittleEndianUnpack16((sxu16 *)&pArch->nEntry, &zBuf[8], sizeof(sxu16));
     ^
src/unqlite.c:29931:6: note: rc is assigned
  rc = SyLittleEndianUnpack32(&nMagic, zBuf, sizeof(sxu32));
     ^
src/unqlite.c:29936:6: note: rc is overwritten
  rc = SyLittleEndianUnpack16((sxu16 *)&pArch->nEntry, &zBuf[8], sizeof(sxu16));
     ^
src/unqlite.c:29941:6: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
  rc = SyLittleEndianUnpack32(&pArch->nCentralSize, &zBuf[12], sizeof(sxu32));
     ^
src/unqlite.c:29936:6: note: rc is assigned
  rc = SyLittleEndianUnpack16((sxu16 *)&pArch->nEntry, &zBuf[8], sizeof(sxu16));
     ^
src/unqlite.c:29941:6: note: rc is overwritten
  rc = SyLittleEndianUnpack32(&pArch->nCentralSize, &zBuf[12], sizeof(sxu32));
     ^
src/unqlite.c:29946:6: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
  rc = SyLittleEndianUnpack32(&pArch->nCentralOfft, &zBuf[16], sizeof(sxu32));
     ^
src/unqlite.c:29941:6: note: rc is assigned
  rc = SyLittleEndianUnpack32(&pArch->nCentralSize, &zBuf[12], sizeof(sxu32));
     ^
src/unqlite.c:29946:6: note: rc is overwritten
  rc = SyLittleEndianUnpack32(&pArch->nCentralOfft, &zBuf[16], sizeof(sxu32));
     ^
src/unqlite.c:29991:6: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
  rc = SyLittleEndianUnpack16(&pEntry->nComprMeth, &zCentral[10], sizeof(sxu16));
     ^
src/unqlite.c:29966:6: note: rc is assigned
  rc = SyLittleEndianUnpack32(&nMagic, zCentral, sizeof(sxu32));
     ^
src/unqlite.c:29991:6: note: rc is overwritten
  rc = SyLittleEndianUnpack16(&pEntry->nComprMeth, &zCentral[10], sizeof(sxu16));
     ^
src/unqlite.c:29999:6: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
  rc = SyLittleEndianUnpack32(&pEntry->nCrc, &zCentral[16], sizeof(sxu32));
     ^
src/unqlite.c:29991:6: note: rc is assigned
  rc = SyLittleEndianUnpack16(&pEntry->nComprMeth, &zCentral[10], sizeof(sxu16));
     ^
src/unqlite.c:29999:6: note: rc is overwritten
  rc = SyLittleEndianUnpack32(&pEntry->nCrc, &zCentral[16], sizeof(sxu32));
     ^
src/unqlite.c:30001:6: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
  rc = SyLittleEndianUnpack32(&pEntry->nByte, &zCentral[24], sizeof(sxu32));
     ^
src/unqlite.c:29999:6: note: rc is assigned
  rc = SyLittleEndianUnpack32(&pEntry->nCrc, &zCentral[16], sizeof(sxu32));
     ^
src/unqlite.c:30001:6: note: rc is overwritten
  rc = SyLittleEndianUnpack32(&pEntry->nByte, &zCentral[24], sizeof(sxu32));
     ^
src/unqlite.c:30010:6: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
  rc = SyLittleEndianUnpack32(&pEntry->nByteCompr, &zCentral[20], sizeof(sxu32));
     ^
src/unqlite.c:30001:6: note: rc is assigned
  rc = SyLittleEndianUnpack32(&pEntry->nByte, &zCentral[24], sizeof(sxu32));
     ^
src/unqlite.c:30010:6: note: rc is overwritten
  rc = SyLittleEndianUnpack32(&pEntry->nByteCompr, &zCentral[20], sizeof(sxu32));
     ^
src/unqlite.c:30021:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SXRET_OK;
       ^
src/unqlite.c:30010:6: note: rc is assigned
  rc = SyLittleEndianUnpack32(&pEntry->nByteCompr, &zCentral[20], sizeof(sxu32));
     ^
src/unqlite.c:30021:8: note: rc is overwritten
    rc = SXRET_OK;
       ^
src/unqlite.c:45548:7: style: Redundant initialization for 'pOut'. The initialized value is overwritten before it is read. [redundantInitialization]
 pOut = &pTos[-pInstr->iP1 + 1];
      ^
src/unqlite.c:45546:25: note: pOut is initialized
 jx9_value *pCur, *pOut = pTos;
                        ^
src/unqlite.c:45548:7: note: pOut is overwritten
 pOut = &pTos[-pInstr->iP1 + 1];
      ^
src/unqlite.c:48357:8: style: Variable 'zIn' is reassigned a value before the old one has been used. [redundantAssignment]
   zIn = &zPtr[1];
       ^
src/unqlite.c:48340:9: note: zIn is assigned
    zIn = zPtr;
        ^
src/unqlite.c:48357:8: note: zIn is overwritten
   zIn = &zPtr[1];
       ^
src/unqlite.c:48915:22: style: Variable 'pEntry->pNextCol' is reassigned a value before the old one has been used. [redundantAssignment]
    pEntry->pNextCol = apNew[iBucket];
                     ^
src/unqlite.c:48912:22: note: pEntry->pNextCol is assigned
    pEntry->pNextCol = pEntry->pPrevCol = 0;
                     ^
src/unqlite.c:48915:22: note: pEntry->pNextCol is overwritten
    pEntry->pNextCol = apNew[iBucket];
                     ^
src/unqlite.c:49068:22: style: Variable 'pEntry->pNextCol' is reassigned a value before the old one has been used. [redundantAssignment]
    pEntry->pNextCol = apNew[iBucket];
                     ^
src/unqlite.c:49065:22: note: pEntry->pNextCol is assigned
    pEntry->pNextCol = pEntry->pPrevCol = 0;
                     ^
src/unqlite.c:49068:22: note: pEntry->pNextCol is overwritten
    pEntry->pNextCol = apNew[iBucket];
                     ^
src/unqlite.c:51975:21: style: Variable 'pEntry->pNextHash' is reassigned a value before the old one has been used. [redundantAssignment]
  pEntry->pNextHash = apNew[iBucket];
                    ^
src/unqlite.c:51972:21: note: pEntry->pNextHash is assigned
  pEntry->pNextHash = pEntry->pPrevHash = 0;
                    ^
src/unqlite.c:51975:21: note: pEntry->pNextHash is overwritten
  pEntry->pNextHash = apNew[iBucket];
                    ^
src/unqlite.c:51991:21: style: Variable 'pEntry->pNextHash' is reassigned a value before the old one has been used. [redundantAssignment]
  pEntry->pNextHash = apNew[iBucket];
                    ^
src/unqlite.c:51988:21: note: pEntry->pNextHash is assigned
  pEntry->pNextHash = pEntry->pPrevHash = 0;
                    ^
src/unqlite.c:51991:21: note: pEntry->pNextHash is overwritten
  pEntry->pNextHash = apNew[iBucket];
                    ^
src/unqlite.c:52007:21: style: Variable 'pEntry->pNextHash' is reassigned a value before the old one has been used. [redundantAssignment]
  pEntry->pNextHash = apNew[iBucket];
                    ^
src/unqlite.c:52004:21: note: pEntry->pNextHash is assigned
  pEntry->pNextHash = pEntry->pPrevHash = 0;
                    ^
src/unqlite.c:52007:21: note: pEntry->pNextHash is overwritten
  pEntry->pNextHash = apNew[iBucket];
                    ^
src/unqlite.c:52023:21: style: Variable 'pEntry->pNextHash' is reassigned a value before the old one has been used. [redundantAssignment]
  pEntry->pNextHash = apNew[iBucket];
                    ^
src/unqlite.c:52020:21: note: pEntry->pNextHash is assigned
  pEntry->pNextHash = pEntry->pPrevHash = 0;
                    ^
src/unqlite.c:52023:21: note: pEntry->pNextHash is overwritten
  pEntry->pNextHash = apNew[iBucket];
                    ^
src/unqlite.c:53179:10: style: Redundant initialization for 'pInode'. The initialized value is overwritten before it is read. [redundantInitialization]
  pInode = pFile->pInode;
         ^
src/unqlite.c:53164:25: note: pInode is initialized
  unixInodeInfo *pInode = pFile->pInode;
                        ^
src/unqlite.c:53179:10: note: pInode is overwritten
  pInode = pFile->pInode;
         ^
src/unqlite.c:55791:26: style: Variable 'pEntry->pNextCollide' is reassigned a value before the old one has been used. [redundantAssignment]
    pEntry->pNextCollide = apNew[iBucket];
                         ^
src/unqlite.c:55788:26: note: pEntry->pNextCollide is assigned
    pEntry->pNextCollide = pEntry->pPrevCollide = 0;
                         ^
src/unqlite.c:55791:26: note: pEntry->pNextCollide is overwritten
    pEntry->pNextCollide = apNew[iBucket];
                         ^
src/unqlite.c:58260:22: style: Variable 'pEntry->pNextCol' is reassigned a value before the old one has been used. [redundantAssignment]
    pEntry->pNextCol = apNew[iBucket];
                     ^
src/unqlite.c:58257:22: note: pEntry->pNextCol is assigned
    pEntry->pNextCol = pEntry->pPrevCol = 0;
                     ^
src/unqlite.c:58260:22: note: pEntry->pNextCol is overwritten
    pEntry->pNextCol = apNew[iBucket];
                     ^
src/unqlite.c:58372:22: style: Variable 'pEntry->pNextCol' is reassigned a value before the old one has been used. [redundantAssignment]
    pEntry->pNextCol = apNew[iBucket];
                     ^
src/unqlite.c:58369:22: note: pEntry->pNextCol is assigned
    pEntry->pNextCol = pEntry->pPrevCol = 0;
                     ^
src/unqlite.c:58372:22: note: pEntry->pNextCol is overwritten
    pEntry->pNextCol = apNew[iBucket];
                     ^
src/unqlite.c:44101:16: warning: Redundant assignment of 'pTos->x.rVal' to itself. [selfAssignment]
  pTos->x.rVal = +pTos->x.rVal;
               ^
src/unqlite.c:44104:16: warning: Redundant assignment of 'pTos->x.iVal' to itself. [selfAssignment]
  pTos->x.iVal = +pTos->x.iVal;
               ^
src/unqlite.c:3634:32: style: The scope of the variable 'pEntry' can be reduced. [variableScope]
 unqlite_kv_methods **apStore,*pEntry;
                               ^
src/unqlite.c:6480:9: style: The scope of the variable 'n' can be reduced. [variableScope]
  sxu32 n;
        ^
src/unqlite.c:6483:10: style: The scope of the variable 'iBucket' can be reduced. [variableScope]
   sxu32 iBucket;
         ^
src/unqlite.c:6644:17: style: The scope of the variable 'zBuf' can be reduced. [variableScope]
  unsigned char zBuf[8];
                ^
src/unqlite.c:8189:23: style: The scope of the variable 'pAux' can be reduced. [variableScope]
 jx9_aux_data *aAux, *pAux;
                      ^
src/unqlite.c:8213:16: style: The scope of the variable 'pAux' can be reduced. [variableScope]
 jx9_aux_data *pAux;
               ^
src/unqlite.c:9661:24: style: The scope of the variable 'zEnd' can be reduced. [variableScope]
 const char *zString, *zEnd;
                       ^
src/unqlite.c:9714:14: style: The scope of the variable 'zString' can be reduced. [variableScope]
 const char *zString;
             ^
src/unqlite.c:9749:14: style: The scope of the variable 'zString' can be reduced. [variableScope]
 const char *zString;
             ^
src/unqlite.c:9789:14: style: The scope of the variable 'zNum' can be reduced. [variableScope]
 const char *zNum;
             ^
src/unqlite.c:10056:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:10205:14: style: The scope of the variable 'zCur' can be reduced. [variableScope]
 const char *zCur, *zIn, *zEnd;
             ^
src/unqlite.c:10207:12: style: The scope of the variable 'c' can be reduced. [variableScope]
 int nLen, c;
           ^
src/unqlite.c:10287:14: style: The scope of the variable 'zCur' can be reduced. [variableScope]
 const char *zCur, *zIn, *zEnd;
             ^
src/unqlite.c:10289:12: style: The scope of the variable 'nJump' can be reduced. [variableScope]
 int nLen, nJump;
           ^
src/unqlite.c:10494:14: style: The scope of the variable 'zCur' can be reduced. [variableScope]
 const char *zCur, *zIn, *zEnd;
             ^
src/unqlite.c:10915:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:11130:16: style: The scope of the variable 'zPtr' can be reduced. [variableScope]
   const char *zPtr;
               ^
src/unqlite.c:11205:16: style: The scope of the variable 'zPtr' can be reduced. [variableScope]
   const char *zPtr;
               ^
src/unqlite.c:11450:6: style: The scope of the variable 'c' can be reduced. [variableScope]
 int c, d;
     ^
src/unqlite.c:11450:9: style: The scope of the variable 'd' can be reduced. [variableScope]
 int c, d;
        ^
src/unqlite.c:11506:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:11559:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:11613:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:11674:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:11735:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:11818:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:11989:6: style: The scope of the variable 'rc' can be reduced. [variableScope]
 int rc;
     ^
src/unqlite.c:12037:20: style: The scope of the variable 'zCur' can be reduced. [variableScope]
 const char *zIn, *zCur, *zEnd;
                   ^
src/unqlite.c:12484:22: style: The scope of the variable 'x' can be reduced. [variableScope]
          char *pre, x;
                     ^
src/unqlite.c:13041:14: style: The scope of the variable 'zPtr' can be reduced. [variableScope]
 const char *zPtr;
             ^
src/unqlite.c:13042:6: style: The scope of the variable 'isEnc' can be reduced. [variableScope]
 int isEnc;
     ^
src/unqlite.c:13068:10: style: The scope of the variable 'rc' can be reduced. [variableScope]
   sxi32 rc;
         ^
src/unqlite.c:13190:14: style: The scope of the variable 'zPtr' can be reduced. [variableScope]
 const char *zPtr;
             ^
src/unqlite.c:13256:23: style: The scope of the variable 'pEntry' can be reduced. [variableScope]
   SyString *aEntry, *pEntry;
                      ^
src/unqlite.c:13257:10: style: The scope of the variable 'rc' can be reduced. [variableScope]
   sxi32 rc;
         ^
src/unqlite.c:13282:14: style: The scope of the variable 'zPtr' can be reduced. [variableScope]
 const char *zPtr, *zTag;
             ^
src/unqlite.c:13490:9: style: The scope of the variable 'c' can be reduced. [variableScope]
 int i, c;
        ^
src/unqlite.c:13522:9: style: The scope of the variable 'c' can be reduced. [variableScope]
 int i, c;
        ^
src/unqlite.c:13748:25: style: The scope of the variable 'c' can be reduced. [variableScope]
 int iLen, iListLen, i, c;
                        ^
src/unqlite.c:13750:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:13801:7: style: The scope of the variable 'zResult' can be reduced. [variableScope]
 char zResult[8];
      ^
src/unqlite.c:13802:9: style: The scope of the variable 'j' can be reduced. [variableScope]
 int i, j;
        ^
src/unqlite.c:15905:14: style: The scope of the variable 'zCur' can be reduced. [variableScope]
 const char *zCur, *zEnd = &zIn[nLen];
             ^
src/unqlite.c:15906:6: style: The scope of the variable 'c' can be reduced. [variableScope]
 int c;
     ^
src/unqlite.c:17466:20: style: The scope of the variable 'zCur' can be reduced. [variableScope]
 const char *zIn, *zCur, *zEnd;
                   ^
src/unqlite.c:17697:16: style: The scope of the variable 'zPtr' can be reduced. [variableScope]
   const char *zPtr = 0;
               ^
src/unqlite.c:18025:11: style: The scope of the variable 'pCur' can be reduced. [variableScope]
 SyToken *pCur;
          ^
src/unqlite.c:18026:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:18077:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:18236:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:18358:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:18731:12: style: The scope of the variable 'pInstr' can be reduced. [variableScope]
  VmInstr *pInstr;
           ^
src/unqlite.c:19174:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:19198:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:19878:8: style: The scope of the variable 'zDup' can be reduced. [variableScope]
 char *zDup;          /* Copy of argument name */
       ^
src/unqlite.c:22203:14: style: The scope of the variable 'pElem' can be reduced. [variableScope]
  jx9_value *pElem;
             ^
src/unqlite.c:22351:9: style: The scope of the variable 'nBucket' can be reduced. [variableScope]
  sxu32 nBucket;
        ^
src/unqlite.c:23006:19: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 jx9_value sKey, *pVal;
                  ^
src/unqlite.c:23045:19: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 jx9_value sKey, *pVal;
                  ^
src/unqlite.c:23220:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:23950:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:24335:13: style: The scope of the variable 'pObj' can be reduced. [variableScope]
 jx9_value *pObj;
            ^
src/unqlite.c:24575:13: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 jx9_value *pVal;
            ^
src/unqlite.c:24654:13: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 jx9_value *pVal;
            ^
src/unqlite.c:25004:13: style: The scope of the variable 'pValue' can be reduced. [variableScope]
 jx9_value *pValue, *pUserData, sKey;
            ^
src/unqlite.c:25570:14: style: The scope of the variable 'zCur' can be reduced. [variableScope]
 const char *zCur;
             ^
src/unqlite.c:25906:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:28137:11: style: The scope of the variable 'iBucket' can be reduced. [variableScope]
 sxu32 n, iBucket;
          ^
src/unqlite.c:29371:22: style: The scope of the variable 'x' can be reduced. [variableScope]
          char *pre, x;
                     ^
src/unqlite.c:30053:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:30320:7: style: The scope of the variable 't' can be reduced. [variableScope]
 sxu8 t;
      ^
src/unqlite.c:31998:10: style: The scope of the variable 'rc' can be reduced. [variableScope]
   sxi32 rc;
         ^
src/unqlite.c:32250:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:32754:8: style: The scope of the variable 'iNest' can be reduced. [variableScope]
 sxi32 iNest, iCur, iNode;
       ^
src/unqlite.c:32754:21: style: The scope of the variable 'iNode' can be reduced. [variableScope]
 sxi32 iNest, iCur, iNode;
                    ^
src/unqlite.c:32925:12: style: The scope of the variable 'iNest' can be reduced. [variableScope]
     sxi32 iNest = 1;
           ^
src/unqlite.c:36283:12: style: The scope of the variable 'nRead' can be reduced. [variableScope]
 jx9_int64 nRead;
           ^
src/unqlite.c:36285:6: style: The scope of the variable 'rc' can be reduced. [variableScope]
 int rc;
     ^
src/unqlite.c:36898:12: style: The scope of the variable 'n' can be reduced. [variableScope]
 jx9_int64 n, nRead;
           ^
src/unqlite.c:36902:6: style: The scope of the variable 'rc' can be reduced. [variableScope]
 int rc, nLen;
     ^
src/unqlite.c:37297:12: style: The scope of the variable 'n' can be reduced. [variableScope]
 jx9_int64 n;
           ^
src/unqlite.c:37564:12: style: The scope of the variable 'n' can be reduced. [variableScope]
 jx9_int64 n, nRead;
           ^
src/unqlite.c:37566:6: style: The scope of the variable 'rc' can be reduced. [variableScope]
 int rc;
     ^
src/unqlite.c:40856:10: style: The scope of the variable 'nWr' can be reduced. [variableScope]
 ssize_t nWr;
         ^
src/unqlite.c:42074:21: style: The scope of the variable 'iCur' can be reduced. [variableScope]
 int iTarget, i, j, iCur, iMax;
                    ^
src/unqlite.c:42619:9: style: The scope of the variable 'pChunk' can be reduced. [variableScope]
  void *pChunk;
        ^
src/unqlite.c:42726:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:45164:13: style: The scope of the variable 'pValue' can be reduced. [variableScope]
 jx9_value *pValue;
            ^
src/unqlite.c:45857:13: style: The scope of the variable 'pObj' can be reduced. [variableScope]
 jx9_value *pObj = 0;
            ^
src/unqlite.c:45905:13: style: The scope of the variable 'pObj' can be reduced. [variableScope]
 jx9_value *pObj = 0;
            ^
src/unqlite.c:46387:14: style: The scope of the variable 'zData' can be reduced. [variableScope]
 const char *zData;
             ^
src/unqlite.c:47584:13: style: The scope of the variable 'c' can be reduced. [variableScope]
 int nByte, c, e;
            ^
src/unqlite.c:47850:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
src/unqlite.c:47880:29: style: The scope of the variable 'pStream' can be reduced. [variableScope]
 jx9_io_stream **apStream, *pStream;
                            ^
src/unqlite.c:47883:6: style: The scope of the variable 'rc' can be reduced. [variableScope]
 int rc;
     ^
src/unqlite.c:48159:9: style: The scope of the variable 'rc' can be reduced. [variableScope]
  sxi32 rc;
        ^
src/unqlite.c:48204:22: style: The scope of the variable 'azMethods' can be reduced. [variableScope]
  static const char *azMethods[] = { "get", "post", "head", "put"};
                     ^
src/unqlite.c:48391:15: style: The scope of the variable 'zPtr' can be reduced. [variableScope]
  const char *zPtr, *zDelimiter, *zEnd = &zIn[nByte];
              ^
src/unqlite.c:48454:13: style: The scope of the variable 'pName' can be reduced. [variableScope]
  SyString *pName, *pValue, sRequest; /* Raw HTTP request */
            ^
src/unqlite.c:48898:9: style: The scope of the variable 'n' can be reduced. [variableScope]
  sxu32 n;
        ^
src/unqlite.c:48941:6: style: The scope of the variable 'rc' can be reduced. [variableScope]
 int rc;
     ^
src/unqlite.c:49051:9: style: The scope of the variable 'n' can be reduced. [variableScope]
  sxu32 n;
        ^
src/unqlite.c:50117:9: style: The scope of the variable 'nDatalen' can be reduced. [variableScope]
  sxu32 nDatalen;
        ^
src/unqlite.c:50344:32: style: The scope of the variable 'zPayload' can be reduced. [variableScope]
 unsigned char *zRaw,*zRawEnd,*zPayload;
                               ^
src/unqlite.c:50348:8: style: The scope of the variable 'nAvail' can be reduced. [variableScope]
 sxu32 nAvail;
       ^
src/unqlite.c:51445:6: style: The scope of the variable 'rc' can be reduced. [variableScope]
 int rc;
     ^
src/unqlite.c:51484:6: style: The scope of the variable 'rc' can be reduced. [variableScope]
 int rc;
     ^
src/unqlite.c:51954:10: style: The scope of the variable 'iBucket' can be reduced. [variableScope]
 sxu32 n,iBucket;
         ^
src/unqlite.c:55774:9: style: The scope of the variable 'n' can be reduced. [variableScope]
  sxu32 n;
        ^
src/unqlite.c:55777:10: style: The scope of the variable 'iBucket' can be reduced. [variableScope]
   sxu32 iBucket;
         ^
src/unqlite.c:56674:16: style: The scope of the variable 'zRaw' can be reduced. [variableScope]
 unsigned char zRaw[UNQLITE_MIN_PAGE_SIZE]; /* Minimum page size */
               ^
src/unqlite.c:57007:6: style: The scope of the variable 'rc' can be reduced. [variableScope]
 int rc;
     ^
src/unqlite.c:57193:9: style: The scope of the variable 'p' can be reduced. [variableScope]
  Page *p;
        ^
src/unqlite.c:57329:6: style: The scope of the variable 'rc' can be reduced. [variableScope]
 int rc;
     ^
src/unqlite.c:57414:6: style: The scope of the variable 'rc' can be reduced. [variableScope]
 int rc = UNQLITE_OK;
     ^
src/unqlite.c:58243:9: style: The scope of the variable 'n' can be reduced. [variableScope]
  sxu32 n;
        ^
src/unqlite.c:58355:9: style: The scope of the variable 'n' can be reduced. [variableScope]
  sxu32 n;
        ^
src/unqlite.c:59362:6: style: The scope of the variable 'rc' can be reduced. [variableScope]
 int rc;
     ^
src/unqlite.c:59424:6: style: The scope of the variable 'rc' can be reduced. [variableScope]
 int rc;
     ^
src/unqlite.c:59487:6: style: The scope of the variable 'rc' can be reduced. [variableScope]
 int rc;
     ^
src/unqlite.c:59791:6: style: The scope of the variable 'rc' can be reduced. [variableScope]
 int rc;
     ^
src/unqlite.c:17433:18: style: Checking if unsigned expression 'pStr->nByte' is less than zero. [unsignedLessThanZero]
 if( pStr->nByte <= 0 ){
                 ^
src/unqlite.c:26354:19: style: Checking if unsigned expression 'pStr->nByte' is less than zero. [unsignedLessThanZero]
  if( pStr->nByte <= 0 ){
                  ^
src/unqlite.c:26365:23: style: Checking if unsigned expression 'pToken->nType' is less than zero. [unsignedLessThanZero]
    if( pToken->nType <= 0 ){
                      ^
src/unqlite.c:26555:19: style: Checking if unsigned expression 'sDelim.nByte' is less than zero. [unsignedLessThanZero]
 if( sDelim.nByte <= 0 || zIn >= zEnd || zIn[0] != '\n' ){
                  ^
src/unqlite.c:27004:11: style: Checking if unsigned expression 'nLen' is less than zero. [unsignedLessThanZero]
 if( nLen <= 0 ){
          ^
src/unqlite.c:27008:12: style: Checking if unsigned expression 'nLen' is less than zero. [unsignedLessThanZero]
  if( nLen <= 0 ){ return 0; } if( zP[0] == 0 || zQ[0] == 0 || zP[0] != zQ[0] ){ break; } zP++; zQ++; nLen--;
           ^
src/unqlite.c:27009:12: style: Checking if unsigned expression 'nLen' is less than zero. [unsignedLessThanZero]
  if( nLen <= 0 ){ return 0; } if( zP[0] == 0 || zQ[0] == 0 || zP[0] != zQ[0] ){ break; } zP++; zQ++; nLen--;
           ^
src/unqlite.c:27010:12: style: Checking if unsigned expression 'nLen' is less than zero. [unsignedLessThanZero]
  if( nLen <= 0 ){ return 0; } if( zP[0] == 0 || zQ[0] == 0 || zP[0] != zQ[0] ){ break; } zP++; zQ++; nLen--;
           ^
src/unqlite.c:27011:12: style: Checking if unsigned expression 'nLen' is less than zero. [unsignedLessThanZero]
  if( nLen <= 0 ){ return 0; } if( zP[0] == 0 || zQ[0] == 0 || zP[0] != zQ[0] ){ break; } zP++; zQ++; nLen--;
           ^
src/unqlite.c:27043:11: style: Checking if unsigned expression 'nLen' is less than zero. [unsignedLessThanZero]
 if( nLen <= 0 ){
          ^
src/unqlite.c:27077:12: style: Checking if unsigned expression 'nSize' is less than zero. [unsignedLessThanZero]
 if( nSize <= 0 ){
           ^
src/unqlite.c:27875:19: style: Checking if unsigned expression 'pSet->nSize' is less than zero. [unsignedLessThanZero]
  if( pSet->nSize <= 0 ){
                  ^
src/unqlite.c:27945:18: style: Checking if unsigned expression 'pSet->nUsed' is less than zero. [unsignedLessThanZero]
 if( pSet->nUsed <= 0 ){
                 ^
src/unqlite.c:27955:18: style: Checking if unsigned expression 'pSet->nUsed' is less than zero. [unsignedLessThanZero]
 if( pSet->nUsed <= 0 ){
                 ^
src/unqlite.c:30088:20: style: Checking if unsigned expression 'pName->nByte' is less than zero. [unsignedLessThanZero]
  if( pName->nByte <= 0 || ( pEntry->nByte <= 0 && pName->zString[pName->nByte - 1] != '/') ){
                   ^
src/unqlite.c:30088:44: style: Checking if unsigned expression 'pEntry->nByte' is less than zero. [unsignedLessThanZero]
  if( pName->nByte <= 0 || ( pEntry->nByte <= 0 && pName->zString[pName->nByte - 1] != '/') ){
                                           ^
src/unqlite.c:31109:18: style: Checking if unsigned expression 'pVal->nByte' is less than zero. [unsignedLessThanZero]
 if( pVal->nByte <= 0 ){
                 ^
src/unqlite.c:31479:18: style: Checking if unsigned expression 'sStr.nByte' is less than zero. [unsignedLessThanZero]
  if( sStr.nByte <= 0 ){
                 ^
src/unqlite.c:31513:34: style: Checking if unsigned expression '(&pObj->sBlob)->nByte' is less than zero. [unsignedLessThanZero]
  if( SyBlobLength(&pObj->sBlob) <= 0 ){
                                 ^
src/unqlite.c:4397:25: style: Redundant pointer operation on 'pDb' - it's already a pointer. [redundantPointerOp]
  rc = unqliteConfigure(&(*pDb),nConfigOp, ap);
                        ^
src/unqlite.c:7473:21: style: Redundant pointer operation on 'pEngine' - it's already a pointer. [redundantPointerOp]
 rc = EngineRelease(&(*pEngine));
                    ^
src/unqlite.c:7530:22: style: Redundant pointer operation on 'pEngine' - it's already a pointer. [redundantPointerOp]
 rc = jx9VmInit(pVm, &(*pEngine));
                     ^
src/unqlite.c:7545:24: style: Redundant pointer operation on 'pScript' - it's already a pointer. [redundantPointerOp]
 jx9CompileScript(pVm, &(*pScript), iFlags);
                       ^
src/unqlite.c:7615:21: style: Redundant pointer operation on 'pEngine' - it's already a pointer. [redundantPointerOp]
 rc = ProcessScript(&(*pEngine),ppOutVm,&sScript,0,0);
                    ^
src/unqlite.c:7666:24: style: Redundant pointer operation on 'pEngine' - it's already a pointer. [redundantPointerOp]
    rc = ProcessScript(&(*pEngine), ppOutVm, &sScript,0,zFilePath);
                       ^
src/unqlite.c:7702:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = jx9VmConfigure(&(*pVm), iConfigOp, ap);
                     ^
src/unqlite.c:7731:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = jx9VmRelease(&(*pVm));
                   ^
src/unqlite.c:7787:35: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = jx9VmInstallForeignFunction(&(*pVm), &sName, xFunc, pUserData);
                                  ^
src/unqlite.c:7840:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = jx9VmRegisterConstant(&(*pVm), &sName, xExpand, pUserData);
                            ^
src/unqlite.c:7893:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pMap = jx9NewHashmap(&(*pVm), 0, 0);
                      ^
src/unqlite.c:8020:20: style: Redundant pointer operation on 'pLeft' - it's already a pointer. [redundantPointerOp]
 rc = jx9MemObjCmp(&(*pLeft), &(*pRight), bStrict, 0);
                   ^
src/unqlite.c:8020:31: style: Redundant pointer operation on 'pRight' - it's already a pointer. [redundantPointerOp]
 rc = jx9MemObjCmp(&(*pLeft), &(*pRight), bStrict, 0);
                              ^
src/unqlite.c:8155:27: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
 jx9VmReleaseContextValue(&(*pCtx), pValue);
                          ^
src/unqlite.c:8303:57: style: Redundant pointer operation on 'pKey' - it's already a pointer. [redundantPointerOp]
 rc = jx9HashmapInsert((jx9_hashmap *)pArray->x.pOther, &(*pKey), &(*pValue));
                                                        ^
src/unqlite.c:8303:67: style: Redundant pointer operation on 'pValue' - it's already a pointer. [redundantPointerOp]
 rc = jx9HashmapInsert((jx9_hashmap *)pArray->x.pOther, &(*pKey), &(*pValue));
                                                                  ^
src/unqlite.c:8320:61: style: Redundant pointer operation on 'pValue' - it's already a pointer. [redundantPointerOp]
  rc = jx9HashmapInsert((jx9_hashmap *)pArray->x.pOther, 0, &(*pValue));
                                                            ^
src/unqlite.c:8325:65: style: Redundant pointer operation on 'pValue' - it's already a pointer. [redundantPointerOp]
  rc = jx9HashmapInsert((jx9_hashmap *)pArray->x.pOther, &sKey, &(*pValue));
                                                                ^
src/unqlite.c:17004:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  jx9_create_function(&(*pVm), aBuiltInFunc[n].zName, aBuiltInFunc[n].xFunc, 0);
                      ^
src/unqlite.c:17007:30: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 jx9RegisterHashmapFunctions(&(*pVm));
                             ^
src/unqlite.c:17009:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 jx9RegisterIORoutine(&(*pVm));
                      ^
src/unqlite.c:17242:20: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 GenStateInitBlock(&(*pGen), pBlock, iType, nFirstInstr, pUserData);
                   ^
src/unqlite.c:17267:23: style: Redundant pointer operation on 'pBlock' - it's already a pointer. [redundantPointerOp]
 GenStateReleaseBlock(&(*pBlock));
                      ^
src/unqlite.c:17288:21: style: Redundant pointer operation on 'pBlock' - it's already a pointer. [redundantPointerOp]
  GenStateFreeBlock(&(*pBlock));
                    ^
src/unqlite.c:17391:36: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  pObj = GenStateInstallNumLiteral(&(*pGen), &nIdx);
                                   ^
src/unqlite.c:17441:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  jx9GenCompileError(&(*pGen), E_ERROR, pGen->pIn->nLine, "JX9 engine is running out of memory");
                     ^
src/unqlite.c:17478:38: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 if( SXRET_OK == GenStateFindLiteral(&(*pGen), pStr, &nIdx) ){
                                     ^
src/unqlite.c:17488:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  jx9GenCompileError(&(*pGen), E_ERROR, 1, "JX9 engine is running out of memory");
                     ^
src/unqlite.c:17581:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = jx9CompileExpr(&(*pGen), 0, 0);
                     ^
src/unqlite.c:17600:20: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  GenStateOutOfMem(&(*pGen));
                   ^
src/unqlite.c:17676:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    pObj = GenStateNewStrObj(&(*pGen), &iCons);
                             ^
src/unqlite.c:17686:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    pObj = GenStateNewStrObj(&(*pGen), &iCons);
                             ^
src/unqlite.c:17704:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    pObj = GenStateNewStrObj(&(*pGen), &iCons);
                             ^
src/unqlite.c:17826:41: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = GenStateProcessStringExpression(&(*pGen),zExpr,zIn);
                                        ^
src/unqlite.c:17889:41: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = GenStateProcessStringExpression(&(*pGen),zExpr, zIn);
                                        ^
src/unqlite.c:17914:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateCompileString(&(*pGen));
                            ^
src/unqlite.c:17983:38: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 if( SXRET_OK != GenStateFindLiteral(&(*pGen), &pToken->sData, &nIdx) ){
                                     ^
src/unqlite.c:17991:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  GenStateInstallLiteral(&(*pGen), pObj, nIdx);
                         ^
src/unqlite.c:18014:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = jx9CompileExpr(&(*pGen), iFlags, xValidator);
                     ^
src/unqlite.c:18042:33: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = GenStateCompileJSONEntry(&(*pGen),pCur,pGen->pIn,EXPR_FLAG_RDONLY_LOAD/*Do not create the variable if inexistant*/,0);
                                ^
src/unqlite.c:18062:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9GenCompileError(&(*pGen), E_ERROR, pRoot->pStart? pRoot->pStart->nLine : 0,
                          ^
src/unqlite.c:18102:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = jx9GenCompileError(&(*pGen), E_ABORT, pCur->nLine, "JSON Object: Missing colon string \":\"");
                           ^
src/unqlite.c:18112:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = jx9GenCompileError(&(*pGen), E_ERROR, pCur->nLine, "JSON Object: Missing entry value");
                            ^
src/unqlite.c:18119:34: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = GenStateCompileJSONEntry(&(*pGen), pKey, pCur,
                                 ^
src/unqlite.c:18129:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   jx9GenCompileError(&(*pGen),E_ERROR, pCur->nLine, "JSON Object: Missing entry key");
                      ^
src/unqlite.c:18136:33: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = GenStateCompileJSONEntry(&(*pGen), pCur, pGen->pIn, EXPR_FLAG_RDONLY_LOAD/*Do not create the variable if inexistant*/,0);
                                ^
src/unqlite.c:18168:25: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = jx9CompileExpr(&(*pGen), EXPR_FLAG_RDONLY_LOAD/* Do not create variable if inexistant */, 0);
                        ^
src/unqlite.c:18192:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9CompileExpr(&(*pGen), EXPR_FLAG_RDONLY_LOAD/* Do not create variable if inexistant */, 0);
                      ^
src/unqlite.c:18198:39: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  if( SXRET_OK != GenStateFindLiteral(&(*pGen), pName, &nIdx) ){
                                      ^
src/unqlite.c:18208:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   GenStateInstallLiteral(&(*pGen), pObj, nIdx);
                          ^
src/unqlite.c:18331:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateCompileFunc(&(*pGen),&sName,0,&pAnnonFunc);
                          ^
src/unqlite.c:18396:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  jx9GenCompileError(&(*pGen), E_WARNING, pGen->pIn->nLine, "Expected semi-colon ';' after 'continue' statement");
                     ^
src/unqlite.c:18448:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  jx9GenCompileError(&(*pGen), E_WARNING, pGen->pIn->nLine, "Expected semi-colon ';' after 'break' statement");
                     ^
src/unqlite.c:18470:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = GenStateEnterBlock(&(*pGen), GEN_BLOCK_STD, jx9VmInstrLength(pGen->pVm), 0, 0);
                          ^
src/unqlite.c:18479:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    jx9GenCompileError(&(*pGen), E_ERROR, nLine, "Missing closing braces '}'");
                       ^
src/unqlite.c:18488:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = GenStateCompileChunk(&(*pGen),JX9_COMPILE_SINGLE_STMT);
                             ^
src/unqlite.c:18493:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  GenStateLeaveBlock(&(*pGen), 0);
                     ^
src/unqlite.c:18496:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = GenStateCompileChunk(&(*pGen),JX9_COMPILE_SINGLE_STMT);
                            ^
src/unqlite.c:18548:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateEnterBlock(&(*pGen), GEN_BLOCK_LOOP, jx9VmInstrLength(pGen->pVm), 0, &pWhileBlock);
                         ^
src/unqlite.c:18566:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = jx9CompileExpr(&(*pGen), 0, 0);
                     ^
src/unqlite.c:18573:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9GenCompileError(&(*pGen), E_ERROR, pGen->pIn->nLine, "Unexpected token '%z'", &pGen->pIn->sData);
                          ^
src/unqlite.c:18587:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = jx9CompileBlock(&(*pGen));
                      ^
src/unqlite.c:18669:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = jx9CompileExpr(&(*pGen), 0, 0);
                     ^
src/unqlite.c:18690:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateEnterBlock(&(*pGen), GEN_BLOCK_LOOP, jx9VmInstrLength(pGen->pVm), 0, &pForBlock);
                         ^
src/unqlite.c:18697:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = jx9CompileExpr(&(*pGen), 0, 0);
                     ^
src/unqlite.c:18724:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = jx9CompileBlock(&(*pGen));
                      ^
src/unqlite.c:18751:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9CompileExpr(&(*pGen), 0, 0);
                      ^
src/unqlite.c:18788:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9GenCompileError(&(*pGen),
                          ^
src/unqlite.c:18843:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateEnterBlock(&(*pGen), GEN_BLOCK_LOOP, jx9VmInstrLength(pGen->pVm), 0, &pForeachBlock);
                         ^
src/unqlite.c:18877:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9GenCompileError(&(*pGen), E_ERROR, pGen->pIn->nLine,
                          ^
src/unqlite.c:18888:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = jx9CompileExpr(&(*pGen), 0, 0);
                     ^
src/unqlite.c:18895:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9GenCompileError(&(*pGen), E_ERROR, pGen->pIn->nLine, "foreach: Unexpected token '%z'", &pGen->pIn->sData);
                          ^
src/unqlite.c:18905:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9GenCompileError(&(*pGen), E_ERROR, pGen->pIn->nLine, "foreach: Missing $key => $value pair");
                          ^
src/unqlite.c:18913:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  jx9GenCompileError(&(*pGen), E_ERROR, pGen->pIn->nLine, "Fatal, JX9 engine is running out-of-memory");
                     ^
src/unqlite.c:18927:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = jx9GenCompileError(&(*pGen), E_ERROR, pGen->pIn->nLine, "foreach: Missing $key");
                           ^
src/unqlite.c:18934:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = jx9CompileExpr(&(*pGen), 0, GenStateForEachNodeValidator);
                       ^
src/unqlite.c:18950:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9GenCompileError(&(*pGen), E_ERROR, pGen->pIn->nLine, "foreach: Missing $value");
                          ^
src/unqlite.c:18958:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = jx9CompileExpr(&(*pGen), 0, GenStateForEachNodeValidator);
                     ^
src/unqlite.c:18981:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = jx9CompileBlock(&(*pGen));
                      ^
src/unqlite.c:19044:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateEnterBlock(&(*pGen), GEN_BLOCK_COND, jx9VmInstrLength(pGen->pVm), 0, &pCondBlock);
                         ^
src/unqlite.c:19081:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9CompileExpr(&(*pGen), 0, 0);
                      ^
src/unqlite.c:19084:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   jx9GenCompileError(&(*pGen), E_ERROR, pGen->pIn->nLine, "Unexpected token '%z'", &pGen->pIn->sData);
                      ^
src/unqlite.c:19098:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9CompileBlock(&(*pGen));
                       ^
src/unqlite.c:19134:25: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = jx9CompileBlock(&(*pGen));
                        ^
src/unqlite.c:19179:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9CompileExpr(&(*pGen), 0, 0);
                      ^
src/unqlite.c:19203:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9CompileExpr(&(*pGen), 0, 0);
                      ^
src/unqlite.c:19246:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = jx9GenCompileError(&(*pGen), E_ERROR, nLine, "Expected variable after 'static' keyword");
                           ^
src/unqlite.c:19253:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9CompileExpr(&(*pGen), 0, 0);
                      ^
src/unqlite.c:19266:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = jx9GenCompileError(&(*pGen), E_ERROR, nLine, "Expected variable after 'static' keyword");
                           ^
src/unqlite.c:19277:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9GenCompileError(&(*pGen), E_ERROR, pGen->pIn->nLine, "static: Unexpected token '%z'", &pGen->pIn->sData);
                          ^
src/unqlite.c:19286:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  jx9GenCompileError(&(*pGen), E_ERROR, nLine, "Fatal, JX9 engine is running out of memory");
                     ^
src/unqlite.c:19298:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9CompileExpr(&(*pGen), 0, 0);
                      ^
src/unqlite.c:19382:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = jx9CompileExpr(&(*pGen), 0, 0);
                     ^
src/unqlite.c:19442:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = jx9GenCompileError(&(*pGen), E_ERROR, pGen->pIn->nLine, "uplink: Expected variable name");
                            ^
src/unqlite.c:19450:25: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
     jx9GenCompileError(&(*pGen), E_WARNING, pGen->pIn[-1].nLine, "uplink: Empty variable name");
                        ^
src/unqlite.c:19452:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
     rc = jx9CompileExpr(&(*pGen), 0, 0);
                         ^
src/unqlite.c:19485:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9GenCompileError(&(*pGen), E_ERROR, pGen->pIn->nLine, "Unexpected token '%z'", &pGen->pIn->sData);
                          ^
src/unqlite.c:19516:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9CompileBlock(&(*pGen));
                       ^
src/unqlite.c:19559:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = jx9CompileExpr(&(*pGen), 0, 0);
                     ^
src/unqlite.c:19619:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateEnterBlock(&(*pGen), GEN_BLOCK_LOOP|GEN_BLOCK_SWITCH,
                         ^
src/unqlite.c:19638:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = jx9CompileExpr(&(*pGen), 0, 0);
                     ^
src/unqlite.c:19645:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9GenCompileError(&(*pGen), E_ERROR, pGen->pIn->nLine,
                          ^
src/unqlite.c:19661:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = jx9GenCompileError(&(*pGen), E_ERROR, pTmp->nLine, "Switch: Unexpected token '%z'", &pTmp->sData);
                           ^
src/unqlite.c:19690:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = jx9GenCompileError(&(*pGen), E_ERROR, pGen->pIn->nLine, "Switch: Unexpected token '%z'",
                            ^
src/unqlite.c:19710:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = jx9GenCompileError(&(*pGen), E_WARNING, pGen->pIn->nLine, "Switch: 'default' case already compiled");
                            ^
src/unqlite.c:19745:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = jx9GenCompileError(&(*pGen), E_ERROR, pGen->pIn->nLine, "Switch: Unexpected token '%z'",
                           ^
src/unqlite.c:19826:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = jx9CompileExpr(&(*pGen), 0, 0);
                     ^
src/unqlite.c:19904:25: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
     jx9GenCompileError(&(*pGen), E_WARNING, pGen->pIn->nLine,
                        ^
src/unqlite.c:19912:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = jx9GenCompileError(&(*pGen), E_ERROR, pGen->pIn->nLine, "Missing argument name");
                           ^
src/unqlite.c:19917:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = jx9GenCompileError(&(*pGen), E_ERROR, pGen->pIn->nLine, "Invalid argument name");
                           ^
src/unqlite.c:19949:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
     rc = jx9GenCompileError(&(*pGen), E_ERROR, pIn->nLine, "Missing argument default value");
                             ^
src/unqlite.c:19953:34: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = GenStateProcessArgValue(&(*pGen), &sArg, pIn, pDefend);
                                 ^
src/unqlite.c:19961:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = jx9GenCompileError(&(*pGen), E_ERROR, pIn->nLine, "Unexpected token '%z'", &pIn->sData);
                            ^
src/unqlite.c:20020:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateEnterBlock(&(*pGen), GEN_BLOCK_PROTECTED|GEN_BLOCK_FUNC,jx9VmInstrLength(pGen->pVm), pFunc, &pBlock);
                         ^
src/unqlite.c:20028:18: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 jx9CompileBlock(&(*pGen));
                 ^
src/unqlite.c:20034:21: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 GenStateLeaveBlock(&(*pGen), 0);
                    ^
src/unqlite.c:20102:39: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = GenStateCollectFuncArgs(pFunc, &(*pGen), pEnd);
                                      ^
src/unqlite.c:20111:31: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateCompileFuncBody(&(*pGen), pFunc);
                              ^
src/unqlite.c:20144:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9GenCompileError(&(*pGen), E_ERROR, nLine, "Invalid function name");
                          ^
src/unqlite.c:20172:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateCompileFunc(&(*pGen),pName,iFlags,0);
                          ^
src/unqlite.c:20199:21: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = pNode->xCode(&(*pGen), iFlags);
                    ^
src/unqlite.c:20204:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  jx9GenCompileError(&(*pGen), E_ERROR, pNode->pStart->nLine,
                     ^
src/unqlite.c:20213:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = GenStateEmitExprCode(&(*pGen), pNode->pCond, iFlags);
                            ^
src/unqlite.c:20222:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = GenStateEmitExprCode(&(*pGen), pNode->pLeft, iFlags);
                             ^
src/unqlite.c:20236:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = GenStateEmitExprCode(&(*pGen), pNode->pRight, iFlags);
                             ^
src/unqlite.c:20261:31: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = GenStateEmitExprCode(&(*pGen), apNode[n], iFlags&~EXPR_FLAG_LOAD_IDX_STORE);
                              ^
src/unqlite.c:20271:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = GenStateEmitExprCode(&(*pGen), pNode->pLeft, iFlags);
                            ^
src/unqlite.c:20292:31: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = GenStateEmitExprCode(&(*pGen), apNode[n], iFlags&~EXPR_FLAG_LOAD_IDX_STORE);
                              ^
src/unqlite.c:20322:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = GenStateEmitExprCode(&(*pGen), pNode->pRight, iFlags);
                            ^
src/unqlite.c:20432:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9ExprMakeTree(&(*pGen), &sExprNode, &pRoot);
                       ^
src/unqlite.c:20437:25: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = xTreeValidator(&(*pGen), pRoot);
                        ^
src/unqlite.c:20441:31: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = GenStateEmitExprCode(&(*pGen), pRoot, iFlags);
                              ^
src/unqlite.c:20446:19: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  jx9ExprFreeTree(&(*pGen), &sExprNode);
                  ^
src/unqlite.c:20559:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = jx9CompileExpr(&(*pGen), 0, 0);
                       ^
src/unqlite.c:20566:15: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = xCons(&(*pGen));
              ^
src/unqlite.c:20638:15: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pGen->pVm  = &(*pVm);
              ^
src/unqlite.c:20644:75: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 GenStateInitBlock(pGen, &pGen->sGlobal,GEN_BLOCK_GLOBAL,jx9VmInstrLength(&(*pVm)), 0);
                                                                          ^
src/unqlite.c:22137:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  jx9_create_constant(&(*pVm), aBuiltIn[n].zName, aBuiltIn[n].xExpand, &(*pVm));
                      ^
src/unqlite.c:22248:17: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 pNode->pMap  = &(*pMap);
                ^
src/unqlite.c:22271:17: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 pNode->pMap  = &(*pMap);
                ^
src/unqlite.c:22422:28: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 pNode = HashmapNewIntNode(&(*pMap), iKey, nHash, nIdx);
                           ^
src/unqlite.c:22427:25: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 rc = HashmapGrowBucket(&(*pMap));
                        ^
src/unqlite.c:22433:18: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 HashmapNodeLink(&(*pMap), pNode, nHash & (pMap->nSize - 1));
                 ^
src/unqlite.c:22460:29: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 pNode = HashmapNewBlobNode(&(*pMap), pKey, nKeyLen, nHash, nIdx);
                            ^
src/unqlite.c:22465:25: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 rc = HashmapGrowBucket(&(*pMap));
                        ^
src/unqlite.c:22471:18: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 HashmapNodeLink(&(*pMap), pNode, nHash & (pMap->nSize - 1));
                 ^
src/unqlite.c:22602:22: style: Redundant pointer operation on 'pKey' - it's already a pointer. [redundantPointerOp]
   jx9MemObjToString(&(*pKey));
                     ^
src/unqlite.c:22606:30: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
   rc = HashmapLookupBlobKey(&(*pMap), SyBlobData(&pKey->sBlob), SyBlobLength(&pKey->sBlob), &pNode);
                             ^
src/unqlite.c:22616:27: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 rc = HashmapLookupIntKey(&(*pMap), pKey->x.iVal, &pNode);
                          ^
src/unqlite.c:22648:22: style: Redundant pointer operation on 'pKey' - it's already a pointer. [redundantPointerOp]
   jx9MemObjToString(&(*pKey));
                     ^
src/unqlite.c:22657:40: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
  if( SXRET_OK == HashmapLookupBlobKey(&(*pMap), SyBlobData(&pKey->sBlob),
                                       ^
src/unqlite.c:22673:29: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
  rc = HashmapInsertBlobKey(&(*pMap),SyBlobData(&pKey->sBlob),SyBlobLength(&pKey->sBlob),&(*pVal));
                            ^
src/unqlite.c:22673:90: style: Redundant pointer operation on 'pVal' - it's already a pointer. [redundantPointerOp]
  rc = HashmapInsertBlobKey(&(*pMap),SyBlobData(&pKey->sBlob),SyBlobLength(&pKey->sBlob),&(*pVal));
                                                                                         ^
src/unqlite.c:22682:39: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
  if( SXRET_OK == HashmapLookupIntKey(&(*pMap), pKey->x.iVal, &pNode) ){
                                      ^
src/unqlite.c:22697:28: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
  rc = HashmapInsertIntKey(&(*pMap), pKey->x.iVal, &(*pVal));
                           ^
src/unqlite.c:22697:52: style: Redundant pointer operation on 'pVal' - it's already a pointer. [redundantPointerOp]
  rc = HashmapInsertIntKey(&(*pMap), pKey->x.iVal, &(*pVal));
                                                   ^
src/unqlite.c:22703:44: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
    while( SXRET_OK == HashmapLookupIntKey(&(*pMap), pMap->iNextIdx, 0) ){
                                           ^
src/unqlite.c:22710:28: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
  rc = HashmapInsertIntKey(&(*pMap),pMap->iNextIdx,&(*pVal));
                           ^
src/unqlite.c:22710:52: style: Redundant pointer operation on 'pVal' - it's already a pointer. [redundantPointerOp]
  rc = HashmapInsertIntKey(&(*pMap),pMap->iNextIdx,&(*pVal));
                                                   ^
src/unqlite.c:22738:33: style: Redundant pointer operation on 'pNode' - it's already a pointer. [redundantPointerOp]
 pObj = HashmapExtractNodeValue(&(*pNode));
                                ^
src/unqlite.c:22747:23: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
   rc = HashmapInsert(&(*pMap), 0, pObj);
                      ^
src/unqlite.c:22749:29: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
   rc = HashmapInsertIntKey(&(*pMap), pNode->xKey.iKey, pObj);
                            ^
src/unqlite.c:22753:29: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
  rc = HashmapInsertBlobKey(&(*pMap), SyBlobData(&pNode->xKey.sKey),
                            ^
src/unqlite.c:22960:29: style: Redundant pointer operation on 'pRight' - it's already a pointer. [redundantPointerOp]
   rc = HashmapLookupIntKey(&(*pRight), pLe->xKey.iKey, &pRe);
                            ^
src/unqlite.c:22964:30: style: Redundant pointer operation on 'pRight' - it's already a pointer. [redundantPointerOp]
   rc = HashmapLookupBlobKey(&(*pRight), SyBlobData(pKey), SyBlobLength(pKey), &pRe);
                             ^
src/unqlite.c:23025:26: style: Redundant pointer operation on 'pDest' - it's already a pointer. [redundantPointerOp]
   rc = jx9HashmapInsert(&(*pDest), &sKey, pVal);
                         ^
src/unqlite.c:23028:23: style: Redundant pointer operation on 'pDest' - it's already a pointer. [redundantPointerOp]
   rc = HashmapInsert(&(*pDest), 0/* Automatic index assign */, pVal);
                      ^
src/unqlite.c:23064:26: style: Redundant pointer operation on 'pDest' - it's already a pointer. [redundantPointerOp]
   rc = jx9HashmapInsert(&(*pDest), &sKey, pVal);
                         ^
src/unqlite.c:23068:29: style: Redundant pointer operation on 'pDest' - it's already a pointer. [redundantPointerOp]
   rc = HashmapInsertIntKey(&(*pDest), pEntry->xKey.iKey, pVal);
                            ^
src/unqlite.c:23134:26: style: Redundant pointer operation on 'pLeft' - it's already a pointer. [redundantPointerOp]
    HashmapLookupBlobKey(&(*pLeft), SyBlobData(&pEntry->xKey.sKey), SyBlobLength(&pEntry->xKey.sKey), 0) ){
                         ^
src/unqlite.c:23138:33: style: Redundant pointer operation on 'pLeft' - it's already a pointer. [redundantPointerOp]
      rc = HashmapInsertBlobKey(&(*pLeft), SyBlobData(&pEntry->xKey.sKey),
                                ^
src/unqlite.c:23147:40: style: Redundant pointer operation on 'pLeft' - it's already a pointer. [redundantPointerOp]
   if( SXRET_OK != HashmapLookupIntKey(&(*pLeft), pEntry->xKey.iKey, 0) ){
                                       ^
src/unqlite.c:23151:31: style: Redundant pointer operation on 'pLeft' - it's already a pointer. [redundantPointerOp]
     rc = HashmapInsertIntKey(&(*pLeft), pEntry->xKey.iKey, pObj);
                              ^
src/unqlite.c:23182:14: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pMap->pVm = &(*pVm);
             ^
src/unqlite.c:23226:26: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  pSuper = jx9_new_array(&(*pVm));
                         ^
src/unqlite.c:23231:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  rc = jx9_vm_config(&(*pVm),JX9_VM_CONFIG_CREATE_VAR, azSuper[n]/* Super-global name*/, pSuper/* Super-global value */);
                     ^
src/unqlite.c:23236:21: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  jx9_release_value(&(*pVm), pSuper);
                    ^
src/unqlite.c:23324:21: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 rc = HashmapLookup(&(*pMap), &(*pKey), ppNode);
                    ^
src/unqlite.c:23324:31: style: Redundant pointer operation on 'pKey' - it's already a pointer. [redundantPointerOp]
 rc = HashmapLookup(&(*pMap), &(*pKey), ppNode);
                              ^
src/unqlite.c:23340:21: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 rc = HashmapInsert(&(*pMap), &(*pKey), &(*pVal));
                    ^
src/unqlite.c:23340:31: style: Redundant pointer operation on 'pKey' - it's already a pointer. [redundantPointerOp]
 rc = HashmapInsert(&(*pMap), &(*pKey), &(*pVal));
                              ^
src/unqlite.c:23340:41: style: Redundant pointer operation on 'pVal' - it's already a pointer. [redundantPointerOp]
 rc = HashmapInsert(&(*pMap), &(*pKey), &(*pVal));
                                        ^
src/unqlite.c:24097:22: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
 HashmapCurrentValue(&(*pCtx), (jx9_hashmap *)apArg[0]->x.pOther, 0);
                     ^
src/unqlite.c:24123:22: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
 HashmapCurrentValue(&(*pCtx), (jx9_hashmap *)apArg[0]->x.pOther, 1);
                     ^
src/unqlite.c:24149:22: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
 HashmapCurrentValue(&(*pCtx), (jx9_hashmap *)apArg[0]->x.pOther, -1);
                     ^
src/unqlite.c:24179:22: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
 HashmapCurrentValue(&(*pCtx), pMap, 0);
                     ^
src/unqlite.c:24209:22: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
 HashmapCurrentValue(&(*pCtx), pMap, 0);
                     ^
src/unqlite.c:25083:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  jx9_create_function(&(*pVm), aHashmapFunc[n].zName, aHashmapFunc[n].xFunc, 0);
                      ^
src/unqlite.c:26320:30: style: Redundant pointer operation on 'pStream' - it's already a pointer. [redundantPointerOp]
       rc = LexExtractNowdoc(&(*pStream), &(*pToken));
                             ^
src/unqlite.c:26320:43: style: Redundant pointer operation on 'pToken' - it's already a pointer. [redundantPointerOp]
       rc = LexExtractNowdoc(&(*pStream), &(*pToken));
                                          ^
src/unqlite.c:26625:26: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
 rc = SyLexInit(&sLexer, &(*pOut),jx9TokenizeInput,0);
                         ^
src/unqlite.c:27184:27: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 pChunk = MemBackendAlloc(&(*pBackend), nByte);
                          ^
src/unqlite.c:27196:26: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
  return MemBackendAlloc(&(*pBackend), nByte);
                         ^
src/unqlite.c:27244:29: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 pChunk = MemBackendRealloc(&(*pBackend), pOld, nByte);
                            ^
src/unqlite.c:27286:22: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 rc = MemBackendFree(&(*pBackend), pChunk);
                     ^
src/unqlite.c:27340:36: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 zBucket = (char *)MemBackendAlloc(&(*pBackend), SXMEM_POOL_MAXALLOC);
                                   ^
src/unqlite.c:27369:44: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
  pBucket = (SyMemHeader *)MemBackendAlloc(&(*pBackend), nByte+sizeof(SyMemHeader));
                                           ^
src/unqlite.c:27387:27: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
  rc = MemPoolBucketAlloc(&(*pBackend), nBucket);
                          ^
src/unqlite.c:27411:31: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 pChunk = MemBackendPoolAlloc(&(*pBackend), nByte);
                              ^
src/unqlite.c:27430:18: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
  MemBackendFree(&(*pBackend), pHeader);
                 ^
src/unqlite.c:27449:26: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 rc = MemBackendPoolFree(&(*pBackend), pChunk);
                         ^
src/unqlite.c:27520:9: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 SyZero(&(*pBackend), sizeof(SyMemBackend));
        ^
src/unqlite.c:27548:9: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 SyZero(&(*pBackend), sizeof(SyMemBackend));
        ^
src/unqlite.c:27573:9: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 SyZero(&(*pBackend), sizeof(SyMemBackend));
        ^
src/unqlite.c:27651:25: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 rc = MemBackendRelease(&(*pBackend));
                        ^
src/unqlite.c:27666:27: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 pNew = SyMemBackendAlloc(&(*pBackend), nSize);
                          ^
src/unqlite.c:27675:36: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 zDest = (char *)SyMemBackendAlloc(&(*pBackend), nSize + 1);
                                   ^
src/unqlite.c:27704:22: style: Redundant pointer operation on 'pAllocator' - it's already a pointer. [redundantPointerOp]
 pBlob->pAllocator = &(*pAllocator);
                     ^
src/unqlite.c:27777:23: style: Redundant pointer operation on 'pBlob' - it's already a pointer. [redundantPointerOp]
 rc = BlobPrepareGrow(&(*pBlob), &nSize);
                      ^
src/unqlite.c:27794:20: style: Redundant pointer operation on 'pBlob' - it's already a pointer. [redundantPointerOp]
 rc = SyBlobAppend(&(*pBlob), (const void *)"\0", sizeof(char));
                   ^
src/unqlite.c:27804:21: style: Redundant pointer operation on 'pDest' - it's already a pointer. [redundantPointerOp]
  rc = SyBlobAppend(&(*pDest), pSrc->pBlob, pSrc->nByte);
                    ^
src/unqlite.c:27995:47: style: Redundant pointer operation on 'pAllocator' - it's already a pointer. [redundantPointerOp]
 apNew = (SyHashEntry_Pr **)SyMemBackendAlloc(&(*pAllocator), sizeof(SyHashEntry_Pr *) * SXHASH_BUCKET_SIZE);
                                              ^
src/unqlite.c:28000:22: style: Redundant pointer operation on 'pAllocator' - it's already a pointer. [redundantPointerOp]
 pHash->pAllocator = &(*pAllocator);
                     ^
src/unqlite.c:28067:24: style: Redundant pointer operation on 'pHash' - it's already a pointer. [redundantPointerOp]
 pEntry = HashGetEntry(&(*pHash), pKey, nKeyLen);
                       ^
src/unqlite.c:28103:24: style: Redundant pointer operation on 'pHash' - it's already a pointer. [redundantPointerOp]
 pEntry = HashGetEntry(&(*pHash), pKey, nKeyLen);
                       ^
src/unqlite.c:28107:23: style: Redundant pointer operation on 'pHash' - it's already a pointer. [redundantPointerOp]
 rc = HashDeleteEntry(&(*pHash), pEntry, ppUserData);
                      ^
src/unqlite.c:28193:22: style: Redundant pointer operation on 'pHash' - it's already a pointer. [redundantPointerOp]
  rc = HashGrowTable(&(*pHash));
                     ^
src/unqlite.c:28211:18: style: Redundant pointer operation on 'pHash' - it's already a pointer. [redundantPointerOp]
 rc = HashInsert(&(*pHash), pEntry);
                 ^
src/unqlite.c:29692:31: style: Redundant pointer operation on 'pBlob' - it's already a pointer. [redundantPointerOp]
 FormatMount(SXFMT_CONS_BLOB, &(*pBlob), 0, 0, &n, zFormat, ap);
                              ^
src/unqlite.c:29704:31: style: Redundant pointer operation on 'pBlob' - it's already a pointer. [redundantPointerOp]
 FormatMount(SXFMT_CONS_BLOB, &(*pBlob), 0, 0, &n, zFormat, ap);
                              ^
src/unqlite.c:29912:24: style: Redundant pointer operation on 'pArch' - it's already a pointer. [redundantPointerOp]
  ArchiveHashGrowTable(&(*pArch));
                       ^
src/unqlite.c:30070:33: style: Redundant pointer operation on 'pArch' - it's already a pointer. [redundantPointerOp]
  rc = GetCentralDirectoryEntry(&(*pArch), pEntry, &zCentral[nOfft], &nIncr);
                                ^
src/unqlite.c:30102:28: style: Redundant pointer operation on 'pArch' - it's already a pointer. [redundantPointerOp]
  rc = ArchiveHashGetEntry(&(*pArch), pName->zString, pName->nByte, &pDup);
                           ^
src/unqlite.c:30142:35: style: Redundant pointer operation on 'pArch' - it's already a pointer. [redundantPointerOp]
  rc = ParseEndOfCentralDirectory(&(*pArch), zEnd);
                                  ^
src/unqlite.c:30161:19: style: Redundant pointer operation on 'pArch' - it's already a pointer. [redundantPointerOp]
  rc = ZipExtract(&(*pArch), zCentral, (sxu32)(zEnd - zCentral), (void *)zBuf);
                  ^
src/unqlite.c:30183:48: style: Redundant pointer operation on 'pAllocator' - it's already a pointer. [redundantPointerOp]
 apHash = (SyArchiveEntry **)SyMemBackendAlloc(&(*pAllocator), SXARCHIVE_HASH_SIZE * sizeof(SyArchiveEntry *));
                                               ^
src/unqlite.c:30192:23: style: Redundant pointer operation on 'pAllocator' - it's already a pointer. [redundantPointerOp]
  pArch->pAllocator = &(*pAllocator);
                      ^
src/unqlite.c:31159:26: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
  return MemObjRealToInt(&(*pObj));
                         ^
src/unqlite.c:31163:28: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
  return MemObjStringToInt(&(*pObj));
                           ^
src/unqlite.c:31238:16: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
  SyBlobFormat(&(*pOut), "%.15g", pObj->x.rVal);
               ^
src/unqlite.c:31240:16: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
  SyBlobFormat(&(*pOut), "%qd", pObj->x.iVal);
               ^
src/unqlite.c:31244:17: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
   SyBlobAppend(&(*pOut),"true", sizeof("true")-1);
                ^
src/unqlite.c:31246:17: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
   SyBlobAppend(&(*pOut),"false", sizeof("false")-1);
                ^
src/unqlite.c:31253:16: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
  SyBlobFormat(&(*pOut), "ResourceID_%#x", pObj->x.pOther);
               ^
src/unqlite.c:31320:31: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
 sxi64 iVal = MemObjRealToInt(&(*pObj));
                              ^
src/unqlite.c:31346:33: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
  pObj->x.iVal = MemObjIntValue(&(*pObj));
                                ^
src/unqlite.c:31361:34: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
  pObj->x.rVal = MemObjRealValue(&(*pObj));
                                 ^
src/unqlite.c:31375:37: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
  pObj->x.iVal = MemObjBooleanValue(&(*pObj));
                                    ^
src/unqlite.c:31391:40: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
  rc = MemObjStringValue(&pObj->sBlob, &(*pObj));
                                       ^
src/unqlite.c:31428:58: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
   jx9HashmapInsert(pMap, 0/* Automatic index assign */, &(*pObj));
                                                         ^
src/unqlite.c:31566:20: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
   jx9MemObjToReal(&(*pObj));
                   ^
src/unqlite.c:31573:38: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
    pObj->x.iVal = MemObjStringToInt(&(*pObj));
                                     ^
src/unqlite.c:31582:19: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
  jx9MemObjToReal(&(*pObj));
                  ^
src/unqlite.c:31594:19: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
  MemObjTryIntger(&(*pObj));
                  ^
src/unqlite.c:31744:25: style: Redundant pointer operation on 'pSrc' - it's already a pointer. [redundantPointerOp]
 SyMemcpy((const void *)&(*pSrc), &(*pDest), sizeof(jx9_value)-(sizeof(jx9_vm *)+sizeof(SyBlob)+sizeof(sxu32)));
                        ^
src/unqlite.c:31744:35: style: Redundant pointer operation on 'pDest' - it's already a pointer. [redundantPointerOp]
 SyMemcpy((const void *)&(*pSrc), &(*pDest), sizeof(jx9_value)-(sizeof(jx9_vm *)+sizeof(SyBlob)+sizeof(sxu32)));
                                  ^
src/unqlite.c:31765:25: style: Redundant pointer operation on 'pSrc' - it's already a pointer. [redundantPointerOp]
 SyMemcpy((const void *)&(*pSrc), &(*pDest),
                        ^
src/unqlite.c:31765:35: style: Redundant pointer operation on 'pDest' - it's already a pointer. [redundantPointerOp]
 SyMemcpy((const void *)&(*pSrc), &(*pDest),
                                  ^
src/unqlite.c:31986:21: style: Redundant pointer operation on 'pObj1' - it's already a pointer. [redundantPointerOp]
    MemObjTryIntger(&(*pObj1));
                    ^
src/unqlite.c:32092:15: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
 SyBlobAppend(&(*pOut), zType, SyStrlen(zType));
              ^
src/unqlite.c:32094:16: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
  SyBlobAppend(&(*pOut), "(", sizeof(char));
               ^
src/unqlite.c:32104:23: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
    MemObjStringValue(&(*pOut), &(*pObj));
                      ^
src/unqlite.c:32104:33: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
    MemObjStringValue(&(*pOut), &(*pObj));
                                ^
src/unqlite.c:32107:18: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
    SyBlobFormat(&(*pOut), "%u '", SyBlobLength(&pObj->sBlob));
                 ^
src/unqlite.c:32109:19: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
     SyBlobAppend(&(*pOut), SyBlobData(pContents), SyBlobLength(pContents));
                  ^
src/unqlite.c:32111:18: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
    SyBlobAppend(&(*pOut), "'", sizeof(char));
                 ^
src/unqlite.c:32114:16: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
  SyBlobAppend(&(*pOut), ")", sizeof(char));
               ^
src/unqlite.c:32119:15: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
 SyBlobAppend(&(*pOut), "\n", sizeof(char));
              ^
src/unqlite.c:32406:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9GenCompileError(&(*pGen), E_ERROR, nLine, "Missing opening parenthesis '(' while declaring annonymous function");
                          ^
src/unqlite.c:32416:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9GenCompileError(&(*pGen), E_ERROR, nLine, "Syntax error while declaring annonymous function");
                          ^
src/unqlite.c:32431:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9GenCompileError(&(*pGen), E_ERROR, nLine, "Syntax error while declaring annonymous function, missing '{'");
                          ^
src/unqlite.c:32476:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = jx9GenCompileError(&(*pGen), E_ERROR, apNode[i]->pStart->nLine, "Syntax error: Unexpected token ')'");
                            ^
src/unqlite.c:32487:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = jx9GenCompileError(&(*pGen), E_ERROR, apNode[i]->pStart->nLine, "Syntax error: Unexpected token ']'");
                            ^
src/unqlite.c:32498:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = jx9GenCompileError(&(*pGen), E_ERROR, apNode[i]->pStart->nLine, "Syntax error: Unexpected token '}'");
                            ^
src/unqlite.c:32530:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = jx9GenCompileError(&(*pGen), E_ERROR, apNode[0]->pStart->nLine, "Syntax error, mismatched '(', '[' or '{'");
                          ^
src/unqlite.c:32627:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
     rc = ExprAssembleAnnon(&(*pGen), &pCur, pGen->pEnd);
                            ^
src/unqlite.c:32678:16: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  ExprFreeTree(&(*pGen), pNode->pLeft);
               ^
src/unqlite.c:32682:16: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  ExprFreeTree(&(*pGen), pNode->pRight);
               ^
src/unqlite.c:32686:16: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  ExprFreeTree(&(*pGen), pNode->pCond);
               ^
src/unqlite.c:32694:17: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   ExprFreeTree(&(*pGen), apArg[n]);
                ^
src/unqlite.c:32712:17: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   ExprFreeTree(&(*pGen), apNode[n]);
                ^
src/unqlite.c:32778:17: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   ExprMakeTree(&(*pGen), &apNode[iNode], iCur-iNode);
                ^
src/unqlite.c:32784:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = jx9GenCompileError(&(*pGen), E_ERROR, pOp->pStart->nLine, "Empty function argument");
                            ^
src/unqlite.c:32791:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = jx9GenCompileError(&(*pGen), E_ERROR, pOp->pStart->nLine, "Missing function argument");
                           ^
src/unqlite.c:32802:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = jx9GenCompileError(&(*pGen), E_ERROR, pOp->pStart->nLine, "Missing function argument");
                            ^
src/unqlite.c:32857:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = ExprMakeTree(&(*pGen), &apNode[iLeft + 1], iCur - iLeft - 1);
                      ^
src/unqlite.c:32863:17: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   ExprFreeTree(&(*pGen), apNode[iLeft]);
                ^
src/unqlite.c:32864:17: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   ExprFreeTree(&(*pGen), apNode[iCur]);
                ^
src/unqlite.c:32911:37: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
      rc = ExprProcessFuncArguments(&(*pGen), pNode, &apNode[iCur+1], nFuncTok-1);
                                    ^
src/unqlite.c:32945:25: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
      rc = ExprMakeTree(&(*pGen), &apNode[iCur+1], iArrTok - iCur - 1);
                        ^
src/unqlite.c:33134:25: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
      rc = ExprMakeTree(&(*pGen), &apNode[iCur + 1], iRight - iCur - 1);
                        ^
src/unqlite.c:33150:25: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
      rc = ExprMakeTree(&(*pGen), &apNode[iRight + 1], nToken - iRight - 1);
                        ^
src/unqlite.c:33273:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = ExprExtractNode(&(*pGen), &pNode);
                       ^
src/unqlite.c:33287:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = ExprVerifyNodes(&(*pGen), apNode, (sxi32)SySetUsed(pExprNode));
                      ^
src/unqlite.c:33296:20: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = ExprMakeTree(&(*pGen), apNode, (sxi32)SySetUsed(pExprNode));
                   ^
src/unqlite.c:41414:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  jx9_create_function(&(*pVm), aVfsFunc[n].zName, aVfsFunc[n].xFunc, (void *)pVm->pEngine->pVfs);
                      ^
src/unqlite.c:41417:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  jx9_create_function(&(*pVm), aIOFunc[n].zName, aIOFunc[n].xFunc, pVm);
                      ^
src/unqlite.c:41776:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = jx9NewForeignFunction(&(*pVm), &(*pName), xFunc, pUserData, &pFunc);
                            ^
src/unqlite.c:41776:38: style: Redundant pointer operation on 'pName' - it's already a pointer. [redundantPointerOp]
 rc = jx9NewForeignFunction(&(*pVm), &(*pName), xFunc, pUserData, &pFunc);
                                     ^
src/unqlite.c:41890:25: style: Redundant pointer operation on 'pContainer' - it's already a pointer. [redundantPointerOp]
  pVm->pByteContainer = &(*pContainer);
                        ^
src/unqlite.c:41966:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pFrame = VmNewFrame(&(*pVm), pUserData);
                     ^
src/unqlite.c:42027:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    jx9VmUnsetMemObj(&(*pVm), aSlot[n].nIdx);
                     ^
src/unqlite.c:42353:17: style: Redundant pointer operation on 'pEngine' - it's already a pointer. [redundantPointerOp]
 pVm->pEngine = &(*pEngine);
                ^
src/unqlite.c:42379:16: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 jx9MemObjInit(&(*pVm), &pVm->sAssertCallback);
               ^
src/unqlite.c:42391:30: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pObj = jx9VmReserveConstObj(&(*pVm), 0);
                             ^
src/unqlite.c:42398:30: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pObj = jx9VmReserveConstObj(&(*pVm), 0);
                             ^
src/unqlite.c:42405:30: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pObj = jx9VmReserveConstObj(&(*pVm), 0);
                             ^
src/unqlite.c:42412:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = VmEnterFrame(&(*pVm), 0, 0);
                   ^
src/unqlite.c:42425:14: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 VmEvalChunk(&(*pVm), 0, &sBuiltin, 0, FALSE);
             ^
src/unqlite.c:42427:24: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 jx9ResetCodeGenerator(&(*pVm), pEngine->xConf.xErr, pEngine->xConf.pErrData);
                       ^
src/unqlite.c:42482:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  jx9MemObjInit(&(*pVm), &pStack[nInstr - 1]);
                ^
src/unqlite.c:42509:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = jx9VmEmitInstr(&(*pVm), JX9_OP_DONE, 0, 0, 0, 0);
                     ^
src/unqlite.c:42514:16: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 jx9MemObjInit(&(*pVm), &pVm->sExec); /* Assume a NULL return value */
               ^
src/unqlite.c:42516:32: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pVm->aOps = VmNewOperandStack(&(*pVm), SySetUsed(pVm->pByteContainer));
                               ^
src/unqlite.c:42525:33: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = VmRegisterSpecialFunction(&(*pVm));
                                ^
src/unqlite.c:42531:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = jx9HashmapLoadBuiltin(&(*pVm));
                            ^
src/unqlite.c:42537:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 jx9RegisterBuiltInConstant(&(*pVm));
                            ^
src/unqlite.c:42539:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 jx9RegisterBuiltInFunction(&(*pVm));
                            ^
src/unqlite.c:42696:26: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  pObj = VmReserveMemObj(&(*pVm), &nIdx);
                         ^
src/unqlite.c:42702:16: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 jx9MemObjInit(&(*pVm), pObj);
               ^
src/unqlite.c:42752:30: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pObj = jx9VmReserveMemObj(&(*pVm),&nIdx);
                             ^
src/unqlite.c:42850:24: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 rc = jx9HashmapInsert(&(*pMap),pKey,&sValue);
                       ^
src/unqlite.c:42970:30: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pObj = jx9VmReserveMemObj(&(*pVm),&nIdx);
                             ^
src/unqlite.c:42991:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pValue = VmExtractSuper(&(*pVm), "_ENV", sizeof("_ENV")-1);
                           ^
src/unqlite.c:42994:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pValue = VmExtractSuper(&(*pVm), "_SERVER", sizeof("_SERVER")-1);
                           ^
src/unqlite.c:43013:27: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  pValue = VmExtractSuper(&(*pVm), "argv", sizeof("argv")-1);
                          ^
src/unqlite.c:43089:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  rc = VmHttpProcessRequest(&(*pVm), zRequest, nByte);
                            ^
src/unqlite.c:43213:26: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = VmCallErrorHandler(&(*pVm), pWorker);
                         ^
src/unqlite.c:43262:26: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = VmCallErrorHandler(&(*pVm), pWorker);
                         ^
src/unqlite.c:43278:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = VmThrowErrorAp(&(*pVm), 0, iErr, zFormat, ap);
                     ^
src/unqlite.c:43293:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = VmThrowErrorAp(&(*pVm), &(*pFuncName), iErr, zFormat, ap);
                     ^
src/unqlite.c:43293:31: style: Redundant pointer operation on 'pFuncName' - it's already a pointer. [redundantPointerOp]
 rc = VmThrowErrorAp(&(*pVm), &(*pFuncName), iErr, zFormat, ap);
                              ^
src/unqlite.c:43578:19: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  jx9VmThrowError(&(*pVm), 0, JX9_CTX_WARNING,
                  ^
src/unqlite.c:43647:25: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pObj = VmExtractMemObj(&(*pVm), &sName, pInstr->p3 ? FALSE : TRUE, pInstr->iP1 != 1);
                        ^
src/unqlite.c:43660:18: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   VmErrorFormat(&(*pVm), JX9_CTX_ERR, "Fatal, JX9 engine is running out of memory while loading variable '%z'", &sName);
                 ^
src/unqlite.c:43681:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pMap = jx9NewHashmap(&(*pVm), 0, 0);
                      ^
src/unqlite.c:43683:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmErrorFormat(&(*pVm), JX9_CTX_ERR,
                ^
src/unqlite.c:43740:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   jx9VmThrowError(&(*pVm), 0, JX9_CTX_NOTICE,
                   ^
src/unqlite.c:43841:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   jx9VmThrowError(&(*pVm), 0, JX9_CTX_ERR,
                   ^
src/unqlite.c:43870:25: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pObj = VmExtractMemObj(&(*pVm), &sName, pInstr->p3 ? FALSE : TRUE, TRUE);
                        ^
src/unqlite.c:43872:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmErrorFormat(&(*pVm), JX9_CTX_ERR,
                ^
src/unqlite.c:43955:19: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    VmErrorFormat(&(*pVm), JX9_CTX_ERR, "Fatal, JX9 engine is running out of memory while creating a new array");
                  ^
src/unqlite.c:44191:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   jx9VmThrowError(&(*pVm), 0, JX9_CTX_ERR, "Cannot perform assignment on a constant object attribute");
                   ^
src/unqlite.c:44236:19: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  jx9VmThrowError(&(*pVm), 0, JX9_CTX_ERR, "Cannot perform assignment on a constant object attribute");
                  ^
src/unqlite.c:44330:19: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  jx9VmThrowError(&(*pVm), 0, JX9_CTX_ERR, "Cannot perform assignment on a constant object attribute");
                  ^
src/unqlite.c:44367:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmErrorFormat(&(*pVm), JX9_CTX_ERR, "Division by zero %qd%%0", a);
                ^
src/unqlite.c:44408:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmErrorFormat(&(*pVm), JX9_CTX_ERR, "Division by zero %qd%%0", a);
                ^
src/unqlite.c:44417:19: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  jx9VmThrowError(&(*pVm), 0, JX9_CTX_ERR, "Cannot perform assignment on a constant object attribute");
                  ^
src/unqlite.c:44453:19: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  jx9VmThrowError(&(*pVm), 0, JX9_CTX_ERR, "Division by zero");
                  ^
src/unqlite.c:44496:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmErrorFormat(&(*pVm), JX9_CTX_ERR, "Division by zero %qd/0", a);
                ^
src/unqlite.c:44507:19: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  jx9VmThrowError(&(*pVm), 0, JX9_CTX_ERR, "Cannot perform assignment on a constant object attribute");
                  ^
src/unqlite.c:44619:19: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  jx9VmThrowError(&(*pVm), 0, JX9_CTX_ERR, "Cannot perform assignment on a constant object attribute");
                  ^
src/unqlite.c:44715:19: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  jx9VmThrowError(&(*pVm), 0, JX9_CTX_ERR, "Cannot perform assignment on a constant object attribute");
                  ^
src/unqlite.c:44785:19: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  jx9VmThrowError(&(*pVm), 0, JX9_CTX_ERR, "Cannot perform assignment on a constant object attribute");
                  ^
src/unqlite.c:45120:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   jx9VmThrowError(&(*pVm), 0, JX9_CTX_WARNING,
                   ^
src/unqlite.c:45128:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   jx9VmThrowError(&(*pVm), 0, JX9_CTX_ERR, "JX9 is running out of memory while preparing the 'foreach' step");
                   ^
src/unqlite.c:45146:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   jx9VmThrowError(&(*pVm), 0, JX9_CTX_ERR, "JX9 is running out of memory while preparing the 'foreach' step");
                   ^
src/unqlite.c:45182:38: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   jx9_value *pKey = VmExtractMemObj(&(*pVm), &pInfo->sKey, FALSE, TRUE);
                                     ^
src/unqlite.c:45188:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  pValue = VmExtractMemObj(&(*pVm), &pInfo->sValue, FALSE, TRUE);
                           ^
src/unqlite.c:45297:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    VmFrameLink(&(*pVm), &sName);
                ^
src/unqlite.c:45317:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmErrorFormat(&(*pVm), JX9_CTX_WARNING, "Invalid function name, JX9 is returning NULL.");
                ^
src/unqlite.c:45340:18: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   VmErrorFormat(&(*pVm), JX9_CTX_ERR,
                 ^
src/unqlite.c:45353:25: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pVmFunc = VmOverload(&(*pVm), pVmFunc, pArg, (int)(pTos-pArg));
                        ^
src/unqlite.c:45358:21: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  rc = VmEnterFrame(&(*pVm),pVmFunc,&pFrame);
                    ^
src/unqlite.c:45361:18: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   VmErrorFormat(&(*pVm), JX9_CTX_ERR,
                 ^
src/unqlite.c:45380:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
     pObj = VmReserveMemObj(&(*pVm), &pStatic->nIdx);
                            ^
src/unqlite.c:45383:21: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
      jx9MemObjInit(&(*pVm), pObj);
                    ^
src/unqlite.c:45386:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
       VmLocalExec(&(*pVm), &pStatic->aByteCode, pObj);
                   ^
src/unqlite.c:45404:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
     rc = VmLocalExec(&(*pVm), &aFormalArg[n].aByteCode, pArg);
                      ^
src/unqlite.c:45420:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    pObj = VmExtractMemObj(&(*pVm), &aFormalArg[n].sName, FALSE, TRUE);
                           ^
src/unqlite.c:45428:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    pObj = VmExtractMemObj(&(*pVm), &sName, TRUE, TRUE);
                           ^
src/unqlite.c:45444:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    pObj = VmExtractMemObj(&(*pVm), &aFormalArg[n].sName, FALSE, TRUE);
                           ^
src/unqlite.c:45447:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
     rc = VmLocalExec(&(*pVm), &aFormalArg[n].aByteCode, pObj);
                      ^
src/unqlite.c:45471:35: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  pFrameStack = VmNewOperandStack(&(*pVm), SySetUsed(&pVmFunc->aByteCode));
                                  ^
src/unqlite.c:45474:18: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   VmErrorFormat(&(*pVm), JX9_CTX_ERR, "JX9 is running out of memory while calling function '%z', JX9 is returning NULL.",
                 ^
src/unqlite.c:45484:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  rc = VmByteCodeExec(&(*pVm), (VmInstr *)SySetBasePtr(&pVmFunc->aByteCode), pFrameStack, -1, pTos);
                      ^
src/unqlite.c:45490:16: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmLeaveFrame(&(*pVm));
               ^
src/unqlite.c:45503:18: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   VmErrorFormat(&(*pVm), JX9_CTX_WARNING, "Call to undefined function '%z', JX9 is returning NULL.", &sName);
                 ^
src/unqlite.c:45520:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  jx9MemObjInit(&(*pVm), &sRet);
                ^
src/unqlite.c:45522:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmInitCallContext(&sCtx, &(*pVm), pFunc, &sRet, 0);
                           ^
src/unqlite.c:45598:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pStack = VmNewOperandStack(&(*pVm), SySetUsed(pByteCode));
                            ^
src/unqlite.c:45603:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = VmByteCodeExec(&(*pVm), (VmInstr *)SySetBasePtr(pByteCode), pStack, -1, &(*pResult));
                     ^
src/unqlite.c:45603:79: style: Redundant pointer operation on 'pResult' - it's already a pointer. [redundantPointerOp]
 rc = VmByteCodeExec(&(*pVm), (VmInstr *)SySetBasePtr(pByteCode), pStack, -1, &(*pResult));
                                                                              ^
src/unqlite.c:45623:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 VmByteCodeExec(&(*pVm), (VmInstr *)SySetBasePtr(pVm->pByteContainer), pVm->aOps, -1, &pVm->sExec);
                ^
src/unqlite.c:46105:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 aStack = VmNewOperandStack(&(*pVm), 1+nArg);
                            ^
src/unqlite.c:46107:19: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  jx9VmThrowError(&(*pVm), 0, JX9_CTX_ERR,
                  ^
src/unqlite.c:46134:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 VmByteCodeExec(&(*pVm), aInstr, aStack, nArg, pResult);
                ^
src/unqlite.c:46168:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = jx9VmCallUserFunction(&(*pVm), pFunc, (int)SySetUsed(&aArg), (jx9_value **)SySetBasePtr(&aArg), pResult);
                            ^
src/unqlite.c:47067:24: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  if( VmIsIncludedFile(&(*pVm), &sPath) ){
                       ^
src/unqlite.c:47133:27: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
   VmEvalChunk(pCtx->pVm, &(*pCtx), &sScript, 0, TRUE);
                          ^
src/unqlite.c:47186:26: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
 rc = VmExecIncludedFile(&(*pCtx), &sFile, FALSE);
                         ^
src/unqlite.c:47220:26: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
 rc = VmExecIncludedFile(&(*pCtx), &sFile, TRUE);
                         ^
src/unqlite.c:47857:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  rc = jx9_create_function(&(*pVm), aVmFunc[n].zName, aVmFunc[n].xFunc, &(*pVm));
                           ^
src/unqlite.c:48297:26: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pGet = VmExtractSuper(&(*pVm), "_POST", sizeof("_POST")-1);
                         ^
src/unqlite.c:48300:26: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pGet = VmExtractSuper(&(*pVm), "_GET", sizeof("_GET")-1);
                         ^
src/unqlite.c:48302:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  pRequest = VmExtractSuper(&(*pVm), "_REQUEST", sizeof("_REQUEST")-1);
                            ^
src/unqlite.c:48396:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  pCookie = VmExtractSuper(&(*pVm), "_COOKIE", sizeof("_COOKIE")-1);
                           ^
src/unqlite.c:48505:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   VmHttpSplitEncodedQuery(&(*pVm), pValue, &sWorker, FALSE);
                           ^
src/unqlite.c:48635:33: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  pHeaderArray = VmExtractSuper(&(*pVm), "_HEADER", sizeof("_HEADER")-1);
                                ^
src/unqlite.c:48652:26: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
     VmHttpPorcessCookie(&(*pVm), &sWorker, pValue->zString, pValue->nByte);
                         ^
src/unqlite.c:48672:32: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
       VmHttpSplitEncodedQuery(&(*pVm), &sRequest, &sWorker, TRUE);
                               ^
src/unqlite.c:4381:37: style:inconclusive: Function 'unqlite_config' argument 2 names different: declaration 'nOp' definition 'nConfigOp'. [funcArgNamesDifferent]
int unqlite_config(unqlite *pDb,int nConfigOp,...)
                                    ^
src/unqlite.c:875:55: note: Function 'unqlite_config' argument 2 names different: declaration 'nOp' definition 'nConfigOp'.
UNQLITE_APIEXPORT int unqlite_config(unqlite *pDb,int nOp,...);
                                                      ^
src/unqlite.c:4381:37: note: Function 'unqlite_config' argument 2 names different: declaration 'nOp' definition 'nConfigOp'.
int unqlite_config(unqlite *pDb,int nConfigOp,...)
                                    ^
src/unqlite.c:6122:81: style:inconclusive: Function 'unqlite_kv_cursor_data' argument 3 names different: declaration 'pnData' definition 'pnByte'. [funcArgNamesDifferent]
int unqlite_kv_cursor_data(unqlite_kv_cursor *pCursor,void *pBuf,unqlite_int64 *pnByte)
                                                                                ^
src/unqlite.c:910:99: note: Function 'unqlite_kv_cursor_data' argument 3 names different: declaration 'pnData' definition 'pnByte'.
UNQLITE_APIEXPORT int unqlite_kv_cursor_data(unqlite_kv_cursor *pCursor,void *pBuf,unqlite_int64 *pnData);
                                                                                                  ^
src/unqlite.c:6122:81: note: Function 'unqlite_kv_cursor_data' argument 3 names different: declaration 'pnData' definition 'pnByte'.
int unqlite_kv_cursor_data(unqlite_kv_cursor *pCursor,void *pBuf,unqlite_int64 *pnByte)
                                                                                ^
src/unqlite.c:31106:50: style:inconclusive: Function 'jx9TokenValueToInt64' argument 1 names different: declaration 'pData' definition 'pVal'. [funcArgNamesDifferent]
JX9_PRIVATE sxi64 jx9TokenValueToInt64(SyString *pVal)
                                                 ^
src/unqlite.c:2967:50: note: Function 'jx9TokenValueToInt64' argument 1 names different: declaration 'pData' definition 'pVal'.
JX9_PRIVATE sxi64 jx9TokenValueToInt64(SyString *pData);
                                                 ^
src/unqlite.c:31106:50: note: Function 'jx9TokenValueToInt64' argument 1 names different: declaration 'pData' definition 'pVal'.
JX9_PRIVATE sxi64 jx9TokenValueToInt64(SyString *pVal)
                                                 ^
src/unqlite.c:42445:14: style:inconclusive: Function 'jx9VmBlobConsumer' argument 1 names different: declaration 'pSrc' definition 'pOut'. [funcArgNamesDifferent]
 const void *pOut,   /* VM Generated output*/
             ^
src/unqlite.c:2977:49: note: Function 'jx9VmBlobConsumer' argument 1 names different: declaration 'pSrc' definition 'pOut'.
JX9_PRIVATE sxi32 jx9VmBlobConsumer(const void *pSrc, unsigned int nLen, void *pUserData);
                                                ^
src/unqlite.c:42445:14: note: Function 'jx9VmBlobConsumer' argument 1 names different: declaration 'pSrc' definition 'pOut'.
 const void *pOut,   /* VM Generated output*/
             ^
src/unqlite.c:42682:63: style:inconclusive: Function 'jx9VmReserveMemObj' argument 2 names different: declaration 'pIndex' definition 'pIdx'. [funcArgNamesDifferent]
JX9_PRIVATE jx9_value * jx9VmReserveMemObj(jx9_vm *pVm,sxu32 *pIdx)
                                                              ^
src/unqlite.c:2978:63: note: Function 'jx9VmReserveMemObj' argument 2 names different: declaration 'pIndex' definition 'pIdx'.
JX9_PRIVATE jx9_value * jx9VmReserveMemObj(jx9_vm *pVm,sxu32 *pIndex);
                                                              ^
src/unqlite.c:42682:63: note: Function 'jx9VmReserveMemObj' argument 2 names different: declaration 'pIndex' definition 'pIdx'.
JX9_PRIVATE jx9_value * jx9VmReserveMemObj(jx9_vm *pVm,sxu32 *pIdx)
                                                              ^
src/unqlite.c:58690:12: style:inconclusive: Function 'unqliteCollectionFetch' argument 2 names different: declaration 'pCol' definition 'pName'. [funcArgNamesDifferent]
 SyString *pName, /* Lookup key */
           ^
src/unqlite.c:3466:80: note: Function 'unqliteCollectionFetch' argument 2 names different: declaration 'pCol' definition 'pName'.
UNQLITE_PRIVATE unqlite_col * unqliteCollectionFetch(unqlite_vm *pVm,SyString *pCol,int iFlag);
                                                                               ^
src/unqlite.c:58690:12: note: Function 'unqliteCollectionFetch' argument 2 names different: declaration 'pCol' definition 'pName'.
 SyString *pName, /* Lookup key */
           ^
src/unqlite.c:10072:7: style: Local variable 'nOfft' shadows outer variable [shadowVariable]
  int nOfft;
      ^
src/unqlite.c:10055:8: note: Shadowed declaration
 sxu32 nOfft;
       ^
src/unqlite.c:10072:7: note: Shadow variable
  int nOfft;
      ^
src/unqlite.c:13067:8: style: Local variable 'nByte' shadows outer argument [shadowArgument]
   int nByte = (int)(zIn-zPtr);
       ^
src/unqlite.c:13031:6: note: Shadowed declaration
 int nByte,  /* Input length */
     ^
src/unqlite.c:13067:8: note: Shadow variable
   int nByte = (int)(zIn-zPtr);
       ^
src/unqlite.c:16566:20: style: Local variable 'aISO8601' shadows outer variable [shadowVariable]
  static const int aISO8601[] = { 7 /* Sunday */, 1 /* Monday */, 2, 3, 4, 5, 6 };
                   ^
src/unqlite.c:15602:18: note: Shadowed declaration
static const int aISO8601[] = { 7 /* Sunday */, 1 /* Monday */, 2, 3, 4, 5, 6 };
                 ^
src/unqlite.c:16566:20: note: Shadow variable
  static const int aISO8601[] = { 7 /* Sunday */, 1 /* Monday */, 2, 3, 4, 5, 6 };
                   ^
src/unqlite.c:16654:7: style: Local variable 'iVal' shadows outer variable [shadowVariable]
  int iVal;
      ^
src/unqlite.c:16640:12: note: Shadowed declaration
 jx9_int64 iVal = 0;
           ^
src/unqlite.c:16654:7: note: Shadow variable
  int iVal;
      ^
src/unqlite.c:17984:14: style: Local variable 'pObj' shadows outer variable [shadowVariable]
  jx9_value *pObj;
             ^
src/unqlite.c:17925:13: note: Shadowed declaration
 jx9_value *pObj;
            ^
src/unqlite.c:17984:14: note: Shadow variable
  jx9_value *pObj;
             ^
src/unqlite.c:29134:24: style: Local variable 'aFmt' shadows outer variable [shadowVariable]
static const SyFmtInfo aFmt[] = {
                       ^
src/unqlite.c:12199:27: note: Shadowed declaration
static const jx9_fmt_info aFmt[] = {
                          ^
src/unqlite.c:29134:24: note: Shadow variable
static const SyFmtInfo aFmt[] = {
                       ^
src/unqlite.c:45423:14: style: Local variable 'sName' shadows outer variable [shadowVariable]
    SyString sName;
             ^
src/unqlite.c:45313:11: note: Shadowed declaration
 SyString sName;
          ^
src/unqlite.c:45423:14: note: Shadow variable
    SyString sName;
             ^
src/unqlite.c:47180:6: error: Uninitialized struct member: sFile.nByte [uninitStructMember]
 if( sFile.nByte < 1 ){
     ^
src/unqlite.c:47214:6: error: Uninitialized struct member: sFile.nByte [uninitStructMember]
 if( sFile.nByte < 1 ){
     ^
src/unqlite.c:2116:28: style: struct member 'SyXMLParser::xStartTag' is never used. [unusedStructMember]
 ProcXMLStartTagHandler    xStartTag;     /* Start element handler */
                           ^
src/unqlite.c:2117:28: style: struct member 'SyXMLParser::xEndTag' is never used. [unusedStructMember]
 ProcXMLEndTagHandler      xEndTag;       /* End element handler */
                           ^
src/unqlite.c:2118:28: style: struct member 'SyXMLParser::xRaw' is never used. [unusedStructMember]
 ProcXMLTextHandler        xRaw;          /* Raw text/CDATA handler   */
                           ^
src/unqlite.c:2119:28: style: struct member 'SyXMLParser::xDoctype' is never used. [unusedStructMember]
 ProcXMLDoctypeHandler     xDoctype;      /* DOCTYPE handler */
                           ^
src/unqlite.c:2120:28: style: struct member 'SyXMLParser::xPi' is never used. [unusedStructMember]
 ProcXMLPIHandler          xPi;           /* Processing instruction (PI) handler*/
                           ^
src/unqlite.c:2121:28: style: struct member 'SyXMLParser::xError' is never used. [unusedStructMember]
 ProcXMLSyntaxErrorHandler xError;        /* Error handler */
                           ^
src/unqlite.c:2122:28: style: struct member 'SyXMLParser::xStartDoc' is never used. [unusedStructMember]
 ProcXMLStartDocument      xStartDoc;     /* StartDoc handler */
                           ^
src/unqlite.c:2123:28: style: struct member 'SyXMLParser::xEndDoc' is never used. [unusedStructMember]
 ProcXMLEndDocument        xEndDoc;       /* EndDoc handler */
                           ^
src/unqlite.c:2124:26: style: struct member 'SyXMLParser::xNameSpace' is never used. [unusedStructMember]
 ProcXMLNameSpaceStart   xNameSpace;    /* Namespace declaration handler  */
                         ^
src/unqlite.c:2125:28: style: struct member 'SyXMLParser::xNameSpaceEnd' is never used. [unusedStructMember]
 ProcXMLNameSpaceEnd       xNameSpaceEnd; /* End namespace declaration handler */
                           ^
src/unqlite.c:4893:5: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 rc = SyBlobFormatAp(&pVal->sBlob, zFormat, ap);
    ^
src/unqlite.c:6388:3: style: Variable 'iSize' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(iSize); /* cc warning */
  ^
src/unqlite.c:8562:5: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 rc = SyBlobFormatAp(&pVal->sBlob, zFormat, ap);
    ^
src/unqlite.c:10386:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
src/unqlite.c:10387:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
src/unqlite.c:10755:3: style: Variable 'pKey' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(pKey); /* cc warning */
  ^
src/unqlite.c:11905:4: style: Variable 'c' is assigned a value that is never used. [unreadVariable]
 c = 0; /* cc warning */
   ^
src/unqlite.c:12696:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:14341:2: style: Variable 'pKey' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pKey); /* cc warning */
 ^
src/unqlite.c:15376:2: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(nArg); /* cc warning */
 ^
src/unqlite.c:15377:2: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(apArg);
 ^
src/unqlite.c:15466:3: style: Variable 'sTm.tm_isdst' is assigned a value that is never used. [unreadVariable]
  STRUCT_TM_TO_SYTM(pTm, &sTm);
  ^
src/unqlite.c:15466:3: style: Variable 'sTm.tm_gmtoff' is assigned a value that is never used. [unreadVariable]
  STRUCT_TM_TO_SYTM(pTm, &sTm);
  ^
src/unqlite.c:15466:3: style: Variable 'sTm.tm_zone' is assigned a value that is never used. [unreadVariable]
  STRUCT_TM_TO_SYTM(pTm, &sTm);
  ^
src/unqlite.c:15489:3: style: Variable 'sTm.tm_isdst' is assigned a value that is never used. [unreadVariable]
  STRUCT_TM_TO_SYTM(pTm, &sTm);
  ^
src/unqlite.c:15489:3: style: Variable 'sTm.tm_gmtoff' is assigned a value that is never used. [unreadVariable]
  STRUCT_TM_TO_SYTM(pTm, &sTm);
  ^
src/unqlite.c:15489:3: style: Variable 'sTm.tm_zone' is assigned a value that is never used. [unreadVariable]
  STRUCT_TM_TO_SYTM(pTm, &sTm);
  ^
src/unqlite.c:16318:3: style: Variable 'sTm.tm_gmtoff' is assigned a value that is never used. [unreadVariable]
  STRUCT_TM_TO_SYTM(pTm, &sTm);
  ^
src/unqlite.c:16318:3: style: Variable 'sTm.tm_zone' is assigned a value that is never used. [unreadVariable]
  STRUCT_TM_TO_SYTM(pTm, &sTm);
  ^
src/unqlite.c:16334:3: style: Variable 'sTm.tm_gmtoff' is assigned a value that is never used. [unreadVariable]
  STRUCT_TM_TO_SYTM(pTm, &sTm);
  ^
src/unqlite.c:16334:3: style: Variable 'sTm.tm_zone' is assigned a value that is never used. [unreadVariable]
  STRUCT_TM_TO_SYTM(pTm, &sTm);
  ^
src/unqlite.c:17393:4: style: Variable 'iCompileFlag' is assigned a value that is never used. [unreadVariable]
   SXUNUSED(iCompileFlag); /* cc warning */
   ^
src/unqlite.c:17442:3: style: Variable 'iCompileFlag' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(iCompileFlag); /* cc warning */
  ^
src/unqlite.c:17489:3: style: Variable 'iCompileFlag' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(iCompileFlag); /* cc warning */
  ^
src/unqlite.c:17662:7: style: Variable 'zCur' is assigned a value that is never used. [unreadVariable]
 zCur = 0;
      ^
src/unqlite.c:17915:2: style: Variable 'iCompileFlag' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(iCompileFlag); /* cc warning */
 ^
src/unqlite.c:17951:5: style: Variable 'iCompileFlag' is assigned a value that is never used. [unreadVariable]
    SXUNUSED(iCompileFlag); /* cc warning */
    ^
src/unqlite.c:18030:2: style: Variable 'iCompileFlag' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(iCompileFlag); /* cc warning */
 ^
src/unqlite.c:18081:2: style: Variable 'iCompileFlag' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(iCompileFlag); /* cc warning */
 ^
src/unqlite.c:18203:5: style: Variable 'iCompileFlag' is assigned a value that is never used. [unreadVariable]
    SXUNUSED(iCompileFlag); /* cc warning */
    ^
src/unqlite.c:18319:3: style: Variable 'iCompileFlag' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(iCompileFlag); /* cc warning */
  ^
src/unqlite.c:18415:8: style: Variable 'nLine' is assigned a value that is never used. [unreadVariable]
 nLine = pGen->pIn->nLine;
       ^
src/unqlite.c:20390:5: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 rc = SXRET_OK;
    ^
src/unqlite.c:20741:2: style: Variable 'pUnused' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUnused);
 ^
src/unqlite.c:20768:2: style: Variable 'pUnused' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUnused);
 ^
src/unqlite.c:20776:2: style: Variable 'pUnused' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUnused);
 ^
src/unqlite.c:20790:2: style: Variable 'pUnused' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUnused);
 ^
src/unqlite.c:20799:2: style: Variable 'pUnused' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUnused);
 ^
src/unqlite.c:20808:2: style: Variable 'pUnused' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUnused);
 ^
src/unqlite.c:20821:2: style: Variable 'pUnused' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUnused);
 ^
src/unqlite.c:20847:2: style: Variable 'sTm.tm_mon' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm, &sTm);
 ^
src/unqlite.c:20847:2: style: Variable 'sTm.tm_mday' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm, &sTm);
 ^
src/unqlite.c:20847:2: style: Variable 'sTm.tm_year' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm, &sTm);
 ^
src/unqlite.c:20847:2: style: Variable 'sTm.tm_yday' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm, &sTm);
 ^
src/unqlite.c:20847:2: style: Variable 'sTm.tm_wday' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm, &sTm);
 ^
src/unqlite.c:20847:2: style: Variable 'sTm.tm_isdst' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm, &sTm);
 ^
src/unqlite.c:20847:2: style: Variable 'sTm.tm_gmtoff' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm, &sTm);
 ^
src/unqlite.c:20847:2: style: Variable 'sTm.tm_zone' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm, &sTm);
 ^
src/unqlite.c:20849:2: style: Variable 'pUnused' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUnused); /* cc warning */
 ^
src/unqlite.c:20869:2: style: Variable 'sTm.tm_hour' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm, &sTm);
 ^
src/unqlite.c:20869:2: style: Variable 'sTm.tm_min' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm, &sTm);
 ^
src/unqlite.c:20869:2: style: Variable 'sTm.tm_sec' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm, &sTm);
 ^
src/unqlite.c:20869:2: style: Variable 'sTm.tm_yday' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm, &sTm);
 ^
src/unqlite.c:20869:2: style: Variable 'sTm.tm_wday' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm, &sTm);
 ^
src/unqlite.c:20869:2: style: Variable 'sTm.tm_isdst' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm, &sTm);
 ^
src/unqlite.c:20869:2: style: Variable 'sTm.tm_gmtoff' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm, &sTm);
 ^
src/unqlite.c:20869:2: style: Variable 'sTm.tm_zone' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm, &sTm);
 ^
src/unqlite.c:20871:2: style: Variable 'pUnused' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUnused); /* cc warning */
 ^
src/unqlite.c:20924:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:20933:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:20942:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:20951:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:20960:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:20969:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:20978:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:20987:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:20996:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21005:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21014:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21023:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21032:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21041:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21050:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21059:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21068:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21077:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21086:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21095:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:21258:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21267:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21276:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21285:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21294:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21303:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21312:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21321:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21330:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21339:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21348:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21357:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21366:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21375:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21384:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21393:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21402:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21411:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21420:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21429:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21439:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21449:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21458:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21467:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21476:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21485:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21494:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21503:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21512:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21521:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21530:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21539:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21548:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21557:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21566:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21575:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21584:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21593:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21602:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21611:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21620:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21629:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21638:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21647:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21656:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21665:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21674:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21683:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21692:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21701:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21710:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21719:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21728:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21737:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21746:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21755:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21764:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21773:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21782:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21791:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21800:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21809:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21818:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21827:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21836:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21845:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21854:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21863:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21905:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21914:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21923:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21932:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21941:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21950:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21959:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21968:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:21977:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
src/unqlite.c:23118:11: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 sxi32 rc = SXRET_OK;
          ^
src/unqlite.c:25106:5: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 rc = SXRET_OK;
    ^
src/unqlite.c:25279:3: style: Variable 'pKey' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(pKey); /* cc warning */
  ^
src/unqlite.c:25382:3: style: Variable 'pCtxData' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(pCtxData); /* cc warning */
  ^
src/unqlite.c:25809:2: style: Variable 'pCtx' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pCtx); /* cc warning */
 ^
src/unqlite.c:25820:2: style: Variable 'pKey' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pKey); /* cc warning */
 ^
src/unqlite.c:25821:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
src/unqlite.c:26033:6: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
     SXUNUSED(pUserData); /* Prevent compiler warning */
     ^
src/unqlite.c:26034:6: style: Variable 'pCtxData' is assigned a value that is never used. [unreadVariable]
     SXUNUSED(pCtxData);
     ^
src/unqlite.c:28583:12: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
 sxreal *p = 0;
           ^
src/unqlite.c:28873:2: style: Variable 'pLex' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pLex); /* Prevent compiler warning */
 ^
src/unqlite.c:29946:6: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
  rc = SyLittleEndianUnpack32(&pArch->nCentralOfft, &zBuf[16], sizeof(sxu32));
     ^
src/unqlite.c:30055:16: style: Variable 'nIncr' is assigned a value that is never used. [unreadVariable]
 nOfft = nIncr = 0;
               ^
src/unqlite.c:30287:2: style: Variable 'pUnused' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUnused);
 ^
src/unqlite.c:31951:2: style: Variable 'iNest' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(iNest);
 ^
src/unqlite.c:33463:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
src/unqlite.c:33464:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
src/unqlite.c:35453:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
src/unqlite.c:35454:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
src/unqlite.c:35480:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
src/unqlite.c:35481:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
src/unqlite.c:35510:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
src/unqlite.c:35511:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
src/unqlite.c:35541:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
src/unqlite.c:35542:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
src/unqlite.c:35572:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
src/unqlite.c:35573:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
src/unqlite.c:37658:3: style: Variable 'pKey' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(pKey); /* cc warning */
  ^
src/unqlite.c:37771:3: style: Variable 'pCtx' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(pCtx); /* cc warning */
  ^
src/unqlite.c:40205:12: style: Variable 'recursive' is assigned a value that is never used. [unreadVariable]
 recursive = 0; /* cc warning */
           ^
src/unqlite.c:40743:4: style: Variable 'pResource' is assigned a value that is never used. [unreadVariable]
   SXUNUSED(pResource); /* cc warning */
   ^
src/unqlite.c:40792:13: style: Variable 'pResource' is assigned a value that is never used. [unreadVariable]
  pResource = 0; /* Compiler warning */
            ^
src/unqlite.c:45836:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg);
  ^
src/unqlite.c:45837:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
src/unqlite.c:45857:18: style: Variable 'pObj' is assigned a value that is never used. [unreadVariable]
 jx9_value *pObj = 0;
                 ^
src/unqlite.c:45905:18: style: Variable 'pObj' is assigned a value that is never used. [unreadVariable]
 jx9_value *pObj = 0;
                 ^
src/unqlite.c:45921:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
src/unqlite.c:45922:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
src/unqlite.c:46064:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
src/unqlite.c:46065:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
src/unqlite.c:46234:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
src/unqlite.c:46235:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
src/unqlite.c:46331:2: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(nArg); /* cc warning */
 ^
src/unqlite.c:46332:2: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(apArg);
 ^
src/unqlite.c:46548:2: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(nArg);
 ^
src/unqlite.c:46549:2: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(apArg); /* cc warning */
 ^
src/unqlite.c:47542:4: style: Variable 'pKey' is assigned a value that is never used. [unreadVariable]
   SXUNUSED(pKey);
   ^
src/unqlite.c:49205:7: style: Variable 'zRaw' is assigned a value that is never used. [unreadVariable]
 zRaw += 8;
      ^
src/unqlite.c:50107:5: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 rc = UNQLITE_OK;
    ^
src/unqlite.c:51705:3: style: Variable 'iPos' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(iPos);
  ^
src/unqlite.c:52251:3: style: Variable 'iPageSize' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(iPageSize); /* cc warning */
  ^
src/unqlite.c:53716:3: style: Variable 'fullSync' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(fullSync);
  ^
src/unqlite.c:53717:3: style: Variable 'dataOnly' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(dataOnly);
  ^
src/unqlite.c:53859:3: style: Variable 'NotUsed' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(NotUsed);
  ^
src/unqlite.c:53904:3: style: Variable 'isDelete' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(isDelete);
  ^
src/unqlite.c:53905:3: style: Variable 'noLock' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(noLock);
  ^
src/unqlite.c:53906:3: style: Variable 'pVfs' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(pVfs);
  ^
src/unqlite.c:54051:6: style: Variable 'zPath' is assigned a value that is never used. [unreadVariable]
     SXUNUSED(zPath);
     ^
src/unqlite.c:54201:3: style: Variable 'NotUsed' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(NotUsed);
  ^
src/unqlite.c:54239:3: style: Variable 'NotUsed' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(NotUsed);
  ^
src/unqlite.c:54251:2: style: Variable 'pVfs' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pVfs);
 ^
src/unqlite.c:54317:4: style: Variable 'pVfs' is assigned a value that is never used. [unreadVariable]
   SXUNUSED(pVfs);
   ^
src/unqlite.c:56609:7: style: Variable 'zRaw' is assigned a value that is never used. [unreadVariable]
 zRaw += nLen;
      ^
src/unqlite.c:57414:9: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 int rc = UNQLITE_OK;
        ^
src/unqlite.c:59040:3: style: Variable 'pKey' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(pKey); /* cc warning */
  ^
src/unqlite.c:59053:3: style: Variable 'iFlag' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(iFlag); /* cc warning */
  ^
src/unqlite.c:59114:9: style: Variable 'iFlag' is assigned a value that is never used. [unreadVariable]
        SXUNUSED(iFlag); /* cc warning */
        ^
src/unqlite.c:59208:2: style: Variable 'argc' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(argc); /* cc warning */
 ^
src/unqlite.c:59209:2: style: Variable 'argv' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(argv);
 ^
src/unqlite.c:59226:2: style: Variable 'argc' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(argc); /* cc warning */
 ^
src/unqlite.c:59227:2: style: Variable 'argv' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(argv);
 ^
src/unqlite.c:59247:2: style: Variable 'argc' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(argc); /* cc warning */
 ^
src/unqlite.c:59248:2: style: Variable 'argv' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(argv);
 ^
src/unqlite.c:59262:2: style: Variable 'argc' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(argc); /* cc warning */
 ^
src/unqlite.c:59263:2: style: Variable 'argv' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(argv);
 ^
src/unqlite.c:60101:2: style: Variable 'argc' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(argc); /* cc warning */
 ^
src/unqlite.c:60102:2: style: Variable 'argv' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(argv);
 ^
src/unqlite.c:60126:2: style: Variable 'argc' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(argc); /* cc warning */
 ^
src/unqlite.c:60127:2: style: Variable 'argv' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(argv);
 ^
src/unqlite.c:60151:2: style: Variable 'argc' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(argc); /* cc warning */
 ^
src/unqlite.c:60152:2: style: Variable 'argv' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(argv);
 ^
src/unqlite.c:46171:11: error: va_list 'ap' was opened but not closed by va_end(). [va_end_missing]
 return rc;
          ^
src/unqlite.c:52776:0: information: Skipping configuration 'ENOTSUP' since the value of 'ENOTSUP' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  case ENOTSUP:
^
src/unqlite.c:53004:0: information: Skipping configuration 'EOVERFLOW' since the value of 'EOVERFLOW' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if( pFile->lastErrno==EOVERFLOW ) return UNQLITE_NOTIMPLEMENTED;
^
src/unqlite.c:3923:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   rc = unqlitePagerRollback(pStore->pPager,FALSE);
^
src/unqlite.c:3927:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  rc = unqlitePagerRollback(pStore->pPager,FALSE);
^
src/unqlite.c:8604:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return (pVal->iFlags & MEMOBJ_INT) ? TRUE : FALSE;
^
src/unqlite.c:8612:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return (pVal->iFlags & MEMOBJ_REAL) ? TRUE : FALSE;
^
src/unqlite.c:8620:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return (pVal->iFlags & MEMOBJ_BOOL) ? TRUE : FALSE;
^
src/unqlite.c:8628:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return (pVal->iFlags & MEMOBJ_STRING) ? TRUE : FALSE;
^
src/unqlite.c:8636:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return (pVal->iFlags & MEMOBJ_NULL) ? TRUE : FALSE;
^
src/unqlite.c:8664:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return (pVal->iFlags & MEMOBJ_SCALAR) ? TRUE : FALSE;
^
src/unqlite.c:8672:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return (pVal->iFlags & MEMOBJ_HASHMAP) ? TRUE : FALSE;
^
src/unqlite.c:8682:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return FALSE;
^
src/unqlite.c:8686:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return FALSE;
^
src/unqlite.c:8696:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return (pVal->iFlags & MEMOBJ_RES) ? TRUE : FALSE;
^
src/unqlite.c:12725:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 jx9InputFormat(sprintfConsumer, pCtx, zFormat, nLen, nArg, apArg, 0, FALSE);
^
src/unqlite.c:12767:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 jx9InputFormat(printfConsumer, pCtx, zFormat, nLen, nArg, apArg, (void *)&nCounter, FALSE);
^
src/unqlite.c:13934:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return FALSE;
^
src/unqlite.c:14073:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  pAux = (strtok_aux_data *)jx9_context_alloc_chunk(pCtx, sizeof(strtok_aux_data), TRUE, FALSE);
^
src/unqlite.c:14081:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   zDup = (char *)jx9_context_alloc_chunk(pCtx, (unsigned int)(nLen+1), TRUE, FALSE);
^
src/unqlite.c:14326:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  zDup = (char *)jx9_context_alloc_chunk(pRep->pCtx, (unsigned int)nByte, FALSE,
^
src/unqlite.c:17135:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return FALSE;
^
src/unqlite.c:22569:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return FALSE;
^
src/unqlite.c:22584:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return FALSE;
^
src/unqlite.c:22780:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 jx9HashmapExtractNodeValue(pLeft, &sObj1, FALSE);
^
src/unqlite.c:22781:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 jx9HashmapExtractNodeValue(pRight, &sObj2, FALSE);
^
src/unqlite.c:23549:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  rc = HashmapNodeCmp(pA, pB, FALSE);
^
src/unqlite.c:23556:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 jx9HashmapExtractNodeValue(pA, &sA, FALSE);
^
src/unqlite.c:23557:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 jx9HashmapExtractNodeValue(pB, &sB, FALSE);
^
src/unqlite.c:23572:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 rc = jx9MemObjCmp(&sA, &sB, FALSE, 0);
^
src/unqlite.c:23588:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  rc = HashmapNodeCmp(pA, pB, FALSE);
^
src/unqlite.c:23595:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 jx9HashmapExtractNodeValue(pA, &sA, FALSE);
^
src/unqlite.c:23596:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 jx9HashmapExtractNodeValue(pB, &sB, FALSE);
^
src/unqlite.c:23611:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 rc = jx9MemObjCmp(&sA, &sB, FALSE, 0);
^
src/unqlite.c:23840:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int bRecursive = FALSE;
^
src/unqlite.c:24553:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 jx9HashmapRelease(pMap, FALSE);
^
src/unqlite.c:25118:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  jx9HashmapExtractNodeValue(pEntry, &sValue, FALSE);
^
src/unqlite.c:27577:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 bInheritMutex = pParent->pMutexMethods ? TRUE : FALSE;
^
src/unqlite.c:28233:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  *pReal = FALSE;
^
src/unqlite.c:28289:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int isNeg = FALSE;
^
src/unqlite.c:28306:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  isNeg = (zSrc[0] == '-') ? TRUE :FALSE;
^
src/unqlite.c:28341:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int isNeg = FALSE;
^
src/unqlite.c:28358:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  isNeg = (zSrc[0] == '-') ? TRUE :FALSE;
^
src/unqlite.c:28416:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int isNeg = FALSE;
^
src/unqlite.c:28431:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  isNeg = (zSrc[0] == '-') ? TRUE :FALSE;
^
src/unqlite.c:28466:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int isNeg = FALSE;
^
src/unqlite.c:28482:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  isNeg = (zSrc[0] == '-') ? TRUE :FALSE;
^
src/unqlite.c:28514:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int isNeg = FALSE;
^
src/unqlite.c:28530:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  isNeg = (zSrc[0] == '-') ? TRUE :FALSE;
^
src/unqlite.c:28579:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 sxu8 neg = FALSE;
^
src/unqlite.c:28597:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  neg =  zSrc[0] == '-' ? TRUE : FALSE ;
^
src/unqlite.c:28630:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 neg = FALSE;
^
src/unqlite.c:28634:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   neg = zSrc[0] == '-' ? TRUE : FALSE ;
^
src/unqlite.c:29007:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if( bUTF8 == FALSE ){
^
src/unqlite.c:31308:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return n > 0 ? TRUE : FALSE;
^
src/unqlite.c:31474:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return FALSE;
^
src/unqlite.c:31481:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   return FALSE;
^
src/unqlite.c:31485:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return rc == SXRET_OK ? TRUE : FALSE;
^
src/unqlite.c:31488:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return FALSE;
^
src/unqlite.c:31507:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return pObj->x.iVal == 0 ? TRUE : FALSE;
^
src/unqlite.c:31509:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return pObj->x.rVal == (jx9_real)0 ? TRUE : FALSE;
^
src/unqlite.c:31525:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   return zIn >= zEnd ? TRUE : FALSE;
^
src/unqlite.c:31529:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return pMap->nEntry == 0 ? TRUE : FALSE;
^
src/unqlite.c:31531:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return FALSE;
^
src/unqlite.c:31558:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  sxu8 bReal = FALSE;
^
src/unqlite.c:32331:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return FALSE;
^
src/unqlite.c:32725:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return pNode->xCode == jx9CompileVariable ? TRUE : FALSE;
^
src/unqlite.c:32734:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    return FALSE;
^
src/unqlite.c:32737:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   return FALSE;
^
src/unqlite.c:32742:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return FALSE;
^
src/unqlite.c:33195:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if( ExprIsModifiableValue(apNode[iLeft]) == FALSE ){
^
src/unqlite.c:36249:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      jx9VmPushFilePath(pVm, (const char *)SyBlobData(&sWorker), SyBlobLength(&sWorker), FALSE, pNew);
^
src/unqlite.c:36262:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    jx9VmPushFilePath(pVm, sFile.zString, sFile.nByte, FALSE, pNew);
^
src/unqlite.c:36479:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pBuf = jx9_context_alloc_chunk(pCtx, (unsigned int)nLen, FALSE, FALSE);
^
src/unqlite.c:36860:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pDev = (io_private *)jx9_context_alloc_chunk(pCtx, sizeof(io_private), TRUE, FALSE);
^
src/unqlite.c:36896:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int use_include  = FALSE;
^
src/unqlite.c:36923:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  use_include, nArg > 2 ? apArg[2] : 0, FALSE, 0);
^
src/unqlite.c:36975:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int use_include  = FALSE;
^
src/unqlite.c:37001:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pHandle = jx9StreamOpenHandle(pCtx->pVm, pStream, zFile, JX9_IO_OPEN_RDONLY, use_include, nArg > 2 ? apArg[2] : 0, FALSE, 0);
^
src/unqlite.c:37069:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int use_include  = FALSE;
^
src/unqlite.c:37119:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  nArg > 3 ? apArg[3] : 0, FALSE, FALSE);
^
src/unqlite.c:37198:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pDev = (io_private *)jx9_context_alloc_chunk(pCtx, sizeof(io_private), TRUE, FALSE);
^
src/unqlite.c:37222:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pDev->pHandle = jx9StreamOpenHandle(pCtx->pVm, pStream, zFile, JX9_IO_OPEN_RDONLY, use_include, nArg > 2 ? apArg[2] : 0, FALSE, 0);
^
src/unqlite.c:37315:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pIn = jx9StreamOpenHandle(pCtx->pVm, pSin, zFile, JX9_IO_OPEN_RDONLY, FALSE, nArg > 2 ? apArg[2] : 0, FALSE, 0);
^
src/unqlite.c:37342:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  JX9_IO_OPEN_CREATE|JX9_IO_OPEN_TRUNC|JX9_IO_OPEN_RDWR, FALSE, nArg > 2 ? apArg[2] : 0, FALSE, 0);
^
src/unqlite.c:37831:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 jx9InputFormat(fprintfConsumer, pCtx, zFormat, nLen, nArg - 1, &apArg[1], (void *)&sFdata, FALSE);
^
src/unqlite.c:38107:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pDev = (io_private *)jx9_context_alloc_chunk(pCtx, sizeof(io_private), TRUE, FALSE);
^
src/unqlite.c:38128:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  nArg > 2 ? jx9_value_to_bool(apArg[2]) : FALSE, pResource, FALSE, 0);
^
src/unqlite.c:38386:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pHandle = jx9StreamOpenHandle(pCtx->pVm, pStream, zFile, JX9_IO_OPEN_RDONLY, FALSE, 0, FALSE, 0);
^
src/unqlite.c:38470:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pArchive = (SyArchive *)jx9_context_alloc_chunk(pCtx, sizeof(SyArchive)+sizeof(zip_raw_data), TRUE, FALSE);
^
src/unqlite.c:38510:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pHandle = jx9StreamOpenHandle(pCtx->pVm, pStream, zFile, JX9_IO_OPEN_RDONLY, FALSE, 0, FALSE, 0);
^
src/unqlite.c:42425:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 VmEvalChunk(&(*pVm), 0, &sBuiltin, 0, FALSE);
^
src/unqlite.c:42721:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int bNullify = FALSE;
^
src/unqlite.c:42735:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  bDup = FALSE;
^
src/unqlite.c:43647:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pObj = VmExtractMemObj(&(*pVm), &sName, pInstr->p3 ? FALSE : TRUE, pInstr->iP1 != 1);
^
src/unqlite.c:43812:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   jx9HashmapExtractNodeValue(pNode, pTos, FALSE);
^
src/unqlite.c:43870:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pObj = VmExtractMemObj(&(*pVm), &sName, pInstr->p3 ? FALSE : TRUE, TRUE);
^
src/unqlite.c:44212:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 jx9MemObjAdd(pNos, pTos, FALSE);
^
src/unqlite.c:44893:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 rc = jx9MemObjCmp(pNos, pTos, FALSE, 0);
^
src/unqlite.c:45008:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 rc = jx9MemObjCmp(pNos, pTos, FALSE, 0);
^
src/unqlite.c:45057:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 rc = jx9MemObjCmp(pNos, pTos, FALSE, 0);
^
src/unqlite.c:45182:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   jx9_value *pKey = VmExtractMemObj(&(*pVm), &pInfo->sKey, FALSE, TRUE);
^
src/unqlite.c:45188:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  pValue = VmExtractMemObj(&(*pVm), &pInfo->sValue, FALSE, TRUE);
^
src/unqlite.c:45223:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   jx9HashmapExtractNodeValue(pNode, pTos, FALSE);
^
src/unqlite.c:45259:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  rc = jx9MemObjCmp(&sValue, &sCaseValue, FALSE, 0);
^
src/unqlite.c:45420:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    pObj = VmExtractMemObj(&(*pVm), &aFormalArg[n].sName, FALSE, TRUE);
^
src/unqlite.c:45444:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    pObj = VmExtractMemObj(&(*pVm), &aFormalArg[n].sName, FALSE, TRUE);
^
src/unqlite.c:45644:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pValue = VmExtractMemObj(pVm,pVar,FALSE,FALSE);
^
src/unqlite.c:46913:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pObj = VmExtractMemObj(pVm, &sVar, TRUE, FALSE);
^
src/unqlite.c:47025:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return FALSE;
^
src/unqlite.c:47186:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 rc = VmExecIncludedFile(&(*pCtx), &sFile, FALSE);
^
src/unqlite.c:47945:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  sxu8 bHostOnly = FALSE;
^
src/unqlite.c:47946:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  sxu8 bIPv6 = FALSE ;
^
src/unqlite.c:48038:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   if( bIPv6 == FALSE ){
^
src/unqlite.c:48163:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  bEol = FALSE;
^
src/unqlite.c:48505:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   VmHttpSplitEncodedQuery(&(*pVm), pValue, &sWorker, FALSE);
^
src/unqlite.c:57591:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return FALSE;
^
src/unqlite.c:53970:0: information: Skipping configuration 'FD_CLOEXEC' since the value of 'FD_CLOEXEC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      fcntl(fd, F_SETFD, fcntl(fd, F_GETFD, 0) | FD_CLOEXEC);
^
src/unqlite.c:54166:0: information: Skipping configuration 'FD_CLOEXEC' since the value of 'FD_CLOEXEC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  fcntl(fd, F_SETFD, fcntl(fd, F_GETFD, 0) | FD_CLOEXEC);
^
src/unqlite.c:53725:0: information: Skipping configuration 'F_FULLFSYNC' since the value of 'F_FULLFSYNC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    rc = fcntl(fd, F_FULLFSYNC, 0);
^
src/unqlite.c:54235:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(NotUsed);
  ^
src/unqlite.c:54235:3: style: Variable 'NotUsed' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(NotUsed);
  ^
src/unqlite.c:41434:4: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
   SXUNUSED(pVm); /* cc warning */
   ^
src/unqlite.c:41466:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pVm); /* cc warning */
 ^
src/unqlite.c:41498:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pVm); /* cc warning */
 ^
src/unqlite.c:41530:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pVm); /* cc warning */
 ^
src/unqlite.c:47143:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 pCtx = 0; /* cc warning */
 ^
src/unqlite.c:47144:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 pPath = 0;
 ^
src/unqlite.c:47145:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 IncludeOnce = 0;
 ^
src/unqlite.c:27066:14: warning: The address of local variable 'sKey' might be accessed at non-zero index. [objectIndex]
 zEnd = &zSrc[nSize];
             ^
src/unqlite.c:8323:40: note: Address of variable taken here.
  jx9MemObjInitFromString(pArray->pVm, &sKey, 0);
                                       ^
src/unqlite.c:8323:40: note: Calling function 'jx9MemObjInitFromString', 2nd argument '&sKey' value is lifetime=sKey
  jx9MemObjInitFromString(pArray->pVm, &sKey, 0);
                                       ^
src/unqlite.c:31680:9: note: Calling function 'SyZero', 1st argument 'pObj' value is lifetime=sKey
 SyZero(pObj, sizeof(jx9_value));
        ^
src/unqlite.c:27066:14: note: The address of local variable 'sKey' might be accessed at non-zero index.
 zEnd = &zSrc[nSize];
             ^
src/unqlite.c:8303:60: warning: Possible null pointer dereference: pKey [nullPointer]
 rc = jx9HashmapInsert((jx9_hashmap *)pArray->x.pOther, &(*pKey), &(*pValue));
                                                           ^
src/unqlite.c:24313:29: note: Calling function 'jx9_array_add_elem', 2nd argument '0' value is 0
 jx9_array_add_elem(pArray, 0, &sKey);
                            ^
src/unqlite.c:8299:40: note: Assuming condition is Assuming condition is false
 if( (pArray->iFlags & MEMOBJ_HASHMAP) == 0 ){
                                       ^
src/unqlite.c:8303:60: note: Null pointer dereference
 rc = jx9HashmapInsert((jx9_hashmap *)pArray->x.pOther, &(*pKey), &(*pValue));
                                                           ^
src/unqlite.c:1901:7: style: struct member 'sytime::tm_usec' is never used. [unusedStructMember]
 long tm_usec; /* microseconds */
      ^
src/unqlite.c:41434:4: style: Variable 'pVm' is assigned a value that is never used. [unreadVariable]
   SXUNUSED(pVm); /* cc warning */
   ^
src/unqlite.c:41466:2: style: Variable 'pVm' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pVm); /* cc warning */
 ^
src/unqlite.c:41498:2: style: Variable 'pVm' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pVm); /* cc warning */
 ^
src/unqlite.c:41530:2: style: Variable 'pVm' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pVm); /* cc warning */
 ^
src/unqlite.c:47143:7: style: Variable 'pCtx' is assigned a value that is never used. [unreadVariable]
 pCtx = 0; /* cc warning */
      ^
src/unqlite.c:47144:8: style: Variable 'pPath' is assigned a value that is never used. [unreadVariable]
 pPath = 0;
       ^
src/unqlite.c:47145:14: style: Variable 'IncludeOnce' is assigned a value that is never used. [unreadVariable]
 IncludeOnce = 0;
             ^
src/unqlite.c:23340:34: error: Null pointer dereference: pKey [ctunullpointer]
 rc = HashmapInsert(&(*pMap), &(*pKey), &(*pVal));
                                 ^
src/unqlite.c:6876:25: note: Calling function jx9HashmapInsert, 2nd argument is null
   rc = jx9HashmapInsert(pMap,0,&sVal);
                        ^
src/unqlite.c:23340:34: note: Dereferencing argument pKey that is null
 rc = HashmapInsert(&(*pMap), &(*pKey), &(*pVal));
                                 ^
src/unqlite.c:23340:44: error: Null pointer dereference: pVal [ctunullpointer]
 rc = HashmapInsert(&(*pMap), &(*pKey), &(*pVal));
                                           ^
src/unqlite.c:43792:25: note: Calling function jx9HashmapInsert, 3rd argument is null
   rc = jx9HashmapInsert(pMap, pIdx, 0);
                        ^
src/unqlite.c:23340:44: note: Dereferencing argument pVal that is null
 rc = HashmapInsert(&(*pMap), &(*pKey), &(*pVal));
                                           ^
src/unqlite.c:17427:0: style: The function 'jx9CompileNowdoc' is never used. [unusedFunction]

^
src/unqlite.c:17383:0: style: The function 'jx9CompileNumLiteral' is never used. [unusedFunction]

^
src/unqlite.c:17463:0: style: The function 'jx9CompileSimpleString' is never used. [unusedFunction]

^
src/unqlite.c:17911:0: style: The function 'jx9CompileString' is never used. [unusedFunction]

^
src/unqlite.c:5178:0: style: The function 'unqlite_array_add_elem' is never used. [unusedFunction]

^
src/unqlite.c:5186:0: style: The function 'unqlite_array_add_strkey_elem' is never used. [unusedFunction]

^
src/unqlite.c:5194:0: style: The function 'unqlite_array_count' is never used. [unusedFunction]

^
src/unqlite.c:5162:0: style: The function 'unqlite_array_fetch' is never used. [unusedFunction]

^
src/unqlite.c:5170:0: style: The function 'unqlite_array_walk' is never used. [unusedFunction]

^
src/unqlite.c:6153:0: style: The function 'unqlite_begin' is never used. [unusedFunction]

^
src/unqlite.c:4409:0: style: The function 'unqlite_close' is never used. [unusedFunction]

^
src/unqlite.c:6179:0: style: The function 'unqlite_commit' is never used. [unusedFunction]

^
src/unqlite.c:4450:0: style: The function 'unqlite_compile' is never used. [unusedFunction]

^
src/unqlite.c:4485:0: style: The function 'unqlite_compile_file' is never used. [unusedFunction]

^
src/unqlite.c:4381:0: style: The function 'unqlite_config' is never used. [unusedFunction]

^
src/unqlite.c:5410:0: style: The function 'unqlite_context_alloc_chunk' is never used. [unusedFunction]

^
src/unqlite.c:5426:0: style: The function 'unqlite_context_free_chunk' is never used. [unusedFunction]

^
src/unqlite.c:5394:0: style: The function 'unqlite_context_new_array' is never used. [unusedFunction]

^
src/unqlite.c:5386:0: style: The function 'unqlite_context_new_scalar' is never used. [unusedFunction]

^
src/unqlite.c:5277:0: style: The function 'unqlite_context_output' is never used. [unusedFunction]

^
src/unqlite.c:5285:0: style: The function 'unqlite_context_output_format' is never used. [unusedFunction]

^
src/unqlite.c:5354:0: style: The function 'unqlite_context_peek_aux_data' is never used. [unusedFunction]

^
src/unqlite.c:5362:0: style: The function 'unqlite_context_pop_aux_data' is never used. [unusedFunction]

^
src/unqlite.c:5346:0: style: The function 'unqlite_context_push_aux_data' is never used. [unusedFunction]

^
src/unqlite.c:5322:0: style: The function 'unqlite_context_random_num' is never used. [unusedFunction]

^
src/unqlite.c:5330:0: style: The function 'unqlite_context_random_string' is never used. [unusedFunction]

^
src/unqlite.c:5418:0: style: The function 'unqlite_context_realloc_chunk' is never used. [unusedFunction]

^
src/unqlite.c:5402:0: style: The function 'unqlite_context_release_value' is never used. [unusedFunction]

^
src/unqlite.c:5370:0: style: The function 'unqlite_context_result_buf_length' is never used. [unusedFunction]

^
src/unqlite.c:5298:0: style: The function 'unqlite_context_throw_error' is never used. [unusedFunction]

^
src/unqlite.c:5306:0: style: The function 'unqlite_context_throw_error_format' is never used. [unusedFunction]

^
src/unqlite.c:5338:0: style: The function 'unqlite_context_user_data' is never used. [unusedFunction]

^
src/unqlite.c:4771:0: style: The function 'unqlite_create_constant' is never used. [unusedFunction]

^
src/unqlite.c:4711:0: style: The function 'unqlite_create_function' is never used. [unusedFunction]

^
src/unqlite.c:4809:0: style: The function 'unqlite_delete_constant' is never used. [unusedFunction]

^
src/unqlite.c:4745:0: style: The function 'unqlite_delete_function' is never used. [unusedFunction]

^
src/unqlite.c:5378:0: style: The function 'unqlite_function_name' is never used. [unusedFunction]

^
src/unqlite.c:5531:0: style: The function 'unqlite_kv_append' is never used. [unusedFunction]

^
src/unqlite.c:5575:0: style: The function 'unqlite_kv_append_fmt' is never used. [unusedFunction]

^
src/unqlite.c:5784:0: style: The function 'unqlite_kv_config' is never used. [unusedFunction]

^
src/unqlite.c:6122:0: style: The function 'unqlite_kv_cursor_data' is never used. [unusedFunction]

^
src/unqlite.c:5874:0: style: The function 'unqlite_kv_cursor_first_entry' is never used. [unusedFunction]

^
src/unqlite.c:5822:0: style: The function 'unqlite_kv_cursor_init' is never used. [unusedFunction]

^
src/unqlite.c:6075:0: style: The function 'unqlite_kv_cursor_key' is never used. [unusedFunction]

^
src/unqlite.c:6059:0: style: The function 'unqlite_kv_cursor_key_callback' is never used. [unusedFunction]

^
src/unqlite.c:5895:0: style: The function 'unqlite_kv_cursor_last_entry' is never used. [unusedFunction]

^
src/unqlite.c:5936:0: style: The function 'unqlite_kv_cursor_next_entry' is never used. [unusedFunction]

^
src/unqlite.c:5957:0: style: The function 'unqlite_kv_cursor_prev_entry' is never used. [unusedFunction]

^
src/unqlite.c:5848:0: style: The function 'unqlite_kv_cursor_release' is never used. [unusedFunction]

^
src/unqlite.c:5916:0: style: The function 'unqlite_kv_cursor_valid_entry' is never used. [unusedFunction]

^
src/unqlite.c:5732:0: style: The function 'unqlite_kv_delete' is never used. [unusedFunction]

^
src/unqlite.c:5628:0: style: The function 'unqlite_kv_fetch' is never used. [unusedFunction]

^
src/unqlite.c:5686:0: style: The function 'unqlite_kv_fetch_callback' is never used. [unusedFunction]

^
src/unqlite.c:5434:0: style: The function 'unqlite_kv_store' is never used. [unusedFunction]

^
src/unqlite.c:5478:0: style: The function 'unqlite_kv_store_fmt' is never used. [unusedFunction]

^
src/unqlite.c:4070:0: style: The function 'unqlite_lib_copyright' is never used. [unusedFunction]

^
src/unqlite.c:4061:0: style: The function 'unqlite_lib_ident' is never used. [unusedFunction]

^
src/unqlite.c:3998:0: style: The function 'unqlite_lib_init' is never used. [unusedFunction]

^
src/unqlite.c:4021:0: style: The function 'unqlite_lib_is_threadsafe' is never used. [unusedFunction]

^
src/unqlite.c:4008:0: style: The function 'unqlite_lib_shutdown' is never used. [unusedFunction]

^
src/unqlite.c:4052:0: style: The function 'unqlite_lib_signature' is never used. [unusedFunction]

^
src/unqlite.c:4043:0: style: The function 'unqlite_lib_version' is never used. [unusedFunction]

^
src/unqlite.c:4315:0: style: The function 'unqlite_open' is never used. [unusedFunction]

^
src/unqlite.c:4997:0: style: The function 'unqlite_result_bool' is never used. [unusedFunction]

^
src/unqlite.c:5005:0: style: The function 'unqlite_result_double' is never used. [unusedFunction]

^
src/unqlite.c:4981:0: style: The function 'unqlite_result_int' is never used. [unusedFunction]

^
src/unqlite.c:4989:0: style: The function 'unqlite_result_int64' is never used. [unusedFunction]

^
src/unqlite.c:5013:0: style: The function 'unqlite_result_null' is never used. [unusedFunction]

^
src/unqlite.c:5058:0: style: The function 'unqlite_result_resource' is never used. [unusedFunction]

^
src/unqlite.c:5021:0: style: The function 'unqlite_result_string' is never used. [unusedFunction]

^
src/unqlite.c:5029:0: style: The function 'unqlite_result_string_format' is never used. [unusedFunction]

^
src/unqlite.c:5050:0: style: The function 'unqlite_result_value' is never used. [unusedFunction]

^
src/unqlite.c:6205:0: style: The function 'unqlite_rollback' is never used. [unusedFunction]

^
src/unqlite.c:6231:0: style: The function 'unqlite_util_load_mmaped_file' is never used. [unusedFunction]

^
src/unqlite.c:6307:0: style: The function 'unqlite_util_random_num' is never used. [unusedFunction]

^
src/unqlite.c:6278:0: style: The function 'unqlite_util_random_string' is never used. [unusedFunction]

^
src/unqlite.c:6258:0: style: The function 'unqlite_util_release_mmaped_file' is never used. [unusedFunction]

^
src/unqlite.c:4851:0: style: The function 'unqlite_value_bool' is never used. [unusedFunction]

^
src/unqlite.c:4973:0: style: The function 'unqlite_value_compare' is never used. [unusedFunction]

^
src/unqlite.c:4867:0: style: The function 'unqlite_value_double' is never used. [unusedFunction]

^
src/unqlite.c:4835:0: style: The function 'unqlite_value_int' is never used. [unusedFunction]

^
src/unqlite.c:4843:0: style: The function 'unqlite_value_int64' is never used. [unusedFunction]

^
src/unqlite.c:5082:0: style: The function 'unqlite_value_is_bool' is never used. [unusedFunction]

^
src/unqlite.c:5114:0: style: The function 'unqlite_value_is_callable' is never used. [unusedFunction]

^
src/unqlite.c:5154:0: style: The function 'unqlite_value_is_empty' is never used. [unusedFunction]

^
src/unqlite.c:5074:0: style: The function 'unqlite_value_is_float' is never used. [unusedFunction]

^
src/unqlite.c:5066:0: style: The function 'unqlite_value_is_int' is never used. [unusedFunction]

^
src/unqlite.c:5130:0: style: The function 'unqlite_value_is_json_array' is never used. [unusedFunction]

^
src/unqlite.c:5138:0: style: The function 'unqlite_value_is_json_object' is never used. [unusedFunction]

^
src/unqlite.c:5098:0: style: The function 'unqlite_value_is_null' is never used. [unusedFunction]

^
src/unqlite.c:5106:0: style: The function 'unqlite_value_is_numeric' is never used. [unusedFunction]

^
src/unqlite.c:5146:0: style: The function 'unqlite_value_is_resource' is never used. [unusedFunction]

^
src/unqlite.c:5122:0: style: The function 'unqlite_value_is_scalar' is never used. [unusedFunction]

^
src/unqlite.c:5090:0: style: The function 'unqlite_value_is_string' is never used. [unusedFunction]

^
src/unqlite.c:4859:0: style: The function 'unqlite_value_null' is never used. [unusedFunction]

^
src/unqlite.c:4917:0: style: The function 'unqlite_value_release' is never used. [unusedFunction]

^
src/unqlite.c:4901:0: style: The function 'unqlite_value_reset_string_cursor' is never used. [unusedFunction]

^
src/unqlite.c:4909:0: style: The function 'unqlite_value_resource' is never used. [unusedFunction]

^
src/unqlite.c:4875:0: style: The function 'unqlite_value_string' is never used. [unusedFunction]

^
src/unqlite.c:4883:0: style: The function 'unqlite_value_string_format' is never used. [unusedFunction]

^
src/unqlite.c:4933:0: style: The function 'unqlite_value_to_bool' is never used. [unusedFunction]

^
src/unqlite.c:4949:0: style: The function 'unqlite_value_to_double' is never used. [unusedFunction]

^
src/unqlite.c:4925:0: style: The function 'unqlite_value_to_int' is never used. [unusedFunction]

^
src/unqlite.c:4941:0: style: The function 'unqlite_value_to_int64' is never used. [unusedFunction]

^
src/unqlite.c:4965:0: style: The function 'unqlite_value_to_resource' is never used. [unusedFunction]

^
src/unqlite.c:4957:0: style: The function 'unqlite_value_to_string' is never used. [unusedFunction]

^
src/unqlite.c:4529:0: style: The function 'unqlite_vm_config' is never used. [unusedFunction]

^
src/unqlite.c:4657:0: style: The function 'unqlite_vm_dump' is never used. [unusedFunction]

^
src/unqlite.c:4557:0: style: The function 'unqlite_vm_exec' is never used. [unusedFunction]

^
src/unqlite.c:4683:0: style: The function 'unqlite_vm_extract_variable' is never used. [unusedFunction]

^
src/unqlite.c:5227:0: style: The function 'unqlite_vm_new_array' is never used. [unusedFunction]

^
src/unqlite.c:5202:0: style: The function 'unqlite_vm_new_scalar' is never used. [unusedFunction]

^
src/unqlite.c:4583:0: style: The function 'unqlite_vm_release' is never used. [unusedFunction]

^
src/unqlite.c:5252:0: style: The function 'unqlite_vm_release_value' is never used. [unusedFunction]

^
src/unqlite.c:4631:0: style: The function 'unqlite_vm_reset' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingIncludeSystem]

